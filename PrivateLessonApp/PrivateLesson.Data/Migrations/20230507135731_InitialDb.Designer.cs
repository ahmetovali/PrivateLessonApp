// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrivateLesson.Data.Concrete.EfCore.Context;

#nullable disable

namespace PrivateLesson.Data.Migrations
{
    [DbContext(typeof(PrivateLessonContext))]
    [Migration("20230507135731_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ad265fb0-dd94-44e0-aff9-bfa6d60f205b",
                            RoleId = "a44a4695-4f86-4b32-9976-eaf375a39633"
                        },
                        new
                        {
                            UserId = "8eb2fa77-dfdc-4ccc-970d-ad824a9703e3",
                            RoleId = "8321c977-3271-42e7-84a7-a664e8ee2070"
                        },
                        new
                        {
                            UserId = "509743b4-0039-49cc-a085-888c0a3904e1",
                            RoleId = "8321c977-3271-42e7-84a7-a664e8ee2070"
                        },
                        new
                        {
                            UserId = "d07aee42-6694-4aaa-90ab-d421155be0ca",
                            RoleId = "8321c977-3271-42e7-84a7-a664e8ee2070"
                        },
                        new
                        {
                            UserId = "32ee0803-e82c-4437-9fd5-1741d30ff5da",
                            RoleId = "8321c977-3271-42e7-84a7-a664e8ee2070"
                        },
                        new
                        {
                            UserId = "f766d0b1-3add-423d-a2c4-1cb4a3042b77",
                            RoleId = "8321c977-3271-42e7-84a7-a664e8ee2070"
                        },
                        new
                        {
                            UserId = "497a4b44-a872-461b-af06-9bdb0328a5c4",
                            RoleId = "8321c977-3271-42e7-84a7-a664e8ee2070"
                        },
                        new
                        {
                            UserId = "d7fc1a90-617a-47eb-8415-5741efc77ba3",
                            RoleId = "8321c977-3271-42e7-84a7-a664e8ee2070"
                        },
                        new
                        {
                            UserId = "2890d2d0-2eb0-43f0-8a38-2e62d8263aa8",
                            RoleId = "8321c977-3271-42e7-84a7-a664e8ee2070"
                        },
                        new
                        {
                            UserId = "334fc8ed-7af0-48e8-99ba-065c9ef4f61f",
                            RoleId = "8321c977-3271-42e7-84a7-a664e8ee2070"
                        },
                        new
                        {
                            UserId = "16f50864-2a00-4aca-b160-e5d6719ec3f8",
                            RoleId = "8321c977-3271-42e7-84a7-a664e8ee2070"
                        },
                        new
                        {
                            UserId = "92e79f96-3a9c-4382-8203-483f63b26b3d",
                            RoleId = "1c976454-b9ff-4fce-92ca-ec86eac67c94"
                        },
                        new
                        {
                            UserId = "f6e4f04e-e4f0-4872-be83-7e4f2bae4d5a",
                            RoleId = "1c976454-b9ff-4fce-92ca-ec86eac67c94"
                        },
                        new
                        {
                            UserId = "38d6d1dc-2173-4fd4-afd5-d75892fbbe7b",
                            RoleId = "1c976454-b9ff-4fce-92ca-ec86eac67c94"
                        },
                        new
                        {
                            UserId = "603da648-462b-4bc9-939e-32da8516728f",
                            RoleId = "1c976454-b9ff-4fce-92ca-ec86eac67c94"
                        },
                        new
                        {
                            UserId = "ad332839-585e-4b96-8e73-0d7bcf2aaafe",
                            RoleId = "1c976454-b9ff-4fce-92ca-ec86eac67c94"
                        },
                        new
                        {
                            UserId = "914e0197-3fd4-4310-872d-605d520fe948",
                            RoleId = "1c976454-b9ff-4fce-92ca-ec86eac67c94"
                        },
                        new
                        {
                            UserId = "73087a08-ad7c-4e46-852d-c6ebb03a1223",
                            RoleId = "1c976454-b9ff-4fce-92ca-ec86eac67c94"
                        },
                        new
                        {
                            UserId = "ef5532ea-9bc5-4f88-9a2a-5e538b399614",
                            RoleId = "1c976454-b9ff-4fce-92ca-ec86eac67c94"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Adverts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 474, DateTimeKind.Local).AddTicks(9460),
                            Description = "ilan",
                            IsApproved = true,
                            Price = 45m,
                            TeacherId = 4,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 474, DateTimeKind.Local).AddTicks(9467),
                            Url = "ilan"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5549),
                            Description = "Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5556),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Fizik",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5567),
                            Description = "Fizik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5569),
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5575),
                            Description = "Kimya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5577),
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Biyoloji",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5582),
                            Description = "Biyoloji Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5584),
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Tarih",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5589),
                            Description = "Tarih Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5591),
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Coğrafya",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5596),
                            Description = "Coğrafya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5598),
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5603),
                            Description = "İngilizce Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5605),
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Almanca",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5609),
                            Description = "Almanca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5611),
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Fransızca",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5616),
                            Description = "Fransızca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5618),
                            Url = "fransizca"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Felsefe",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5623),
                            Description = "Felsefe Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5625),
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 11,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5630),
                            Description = "Müzik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5632),
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 12,
                            BranchName = "Resim",
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5637),
                            Description = "Resim Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 478, DateTimeKind.Local).AddTicks(5639),
                            Url = "resim"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "ad265fb0-dd94-44e0-aff9-bfa6d60f205b"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "8eb2fa77-dfdc-4ccc-970d-ad824a9703e3"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "509743b4-0039-49cc-a085-888c0a3904e1"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "d07aee42-6694-4aaa-90ab-d421155be0ca"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "32ee0803-e82c-4437-9fd5-1741d30ff5da"
                        },
                        new
                        {
                            Id = 6,
                            UserId = "f766d0b1-3add-423d-a2c4-1cb4a3042b77"
                        },
                        new
                        {
                            Id = 7,
                            UserId = "497a4b44-a872-461b-af06-9bdb0328a5c4"
                        },
                        new
                        {
                            Id = 8,
                            UserId = "d7fc1a90-617a-47eb-8415-5741efc77ba3"
                        },
                        new
                        {
                            Id = 9,
                            UserId = "2890d2d0-2eb0-43f0-8a38-2e62d8263aa8"
                        },
                        new
                        {
                            Id = 10,
                            UserId = "334fc8ed-7af0-48e8-99ba-065c9ef4f61f"
                        },
                        new
                        {
                            Id = 11,
                            UserId = "16f50864-2a00-4aca-b160-e5d6719ec3f8"
                        },
                        new
                        {
                            Id = 12,
                            UserId = "92e79f96-3a9c-4382-8203-483f63b26b3d"
                        },
                        new
                        {
                            Id = 13,
                            UserId = "f6e4f04e-e4f0-4872-be83-7e4f2bae4d5a"
                        },
                        new
                        {
                            Id = 14,
                            UserId = "38d6d1dc-2173-4fd4-afd5-d75892fbbe7b"
                        },
                        new
                        {
                            Id = 15,
                            UserId = "603da648-462b-4bc9-939e-32da8516728f"
                        },
                        new
                        {
                            Id = 16,
                            UserId = "ad332839-585e-4b96-8e73-0d7bcf2aaafe"
                        },
                        new
                        {
                            Id = 17,
                            UserId = "914e0197-3fd4-4310-872d-605d520fe948"
                        },
                        new
                        {
                            Id = 18,
                            UserId = "73087a08-ad7c-4e46-852d-c6ebb03a1223"
                        },
                        new
                        {
                            Id = 19,
                            UserId = "ef5532ea-9bc5-4f88-9a2a-5e538b399614"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a44a4695-4f86-4b32-9976-eaf375a39633",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1c976454-b9ff-4fce-92ca-ec86eac67c94",
                            Description = "Öğretmenler",
                            Name = "Ogretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "8321c977-3271-42e7-84a7-a664e8ee2070",
                            Description = "Öğrenciler",
                            Name = "Ogrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad265fb0-dd94-44e0-aff9-bfa6d60f205b",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "9e99bb9f-3754-43f5-8fc2-aa17fc7407f3",
                            DateOfBirth = new DateTime(1998, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Ovalı",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET@HOTMAIL.COM",
                            NormalizedUserName = "AHMET",
                            PasswordHash = "AQAAAAIAAYagAAAAEOJ8WdPmw8w/lVQ/G3ra1hW89CZmET+oxMCe9P37j6pz6TNj6rM9hDzoIsHIXmZljg==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a604c1b3-de54-4903-87c3-fa2058f44cca",
                            TwoFactorEnabled = false,
                            UserName = "ahmet"
                        },
                        new
                        {
                            Id = "8eb2fa77-dfdc-4ccc-970d-ad824a9703e3",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "fd4e512d-ccdf-4383-a771-1dd66dbb67c9",
                            DateOfBirth = new DateTime(2007, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "denizcakir@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Çakır",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZCAKIR@HOTMAIL.COM",
                            NormalizedUserName = "DENIZCAKIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEAGxHROPNxvRpJXvKU6JJ9G1ORwZ1915AW8g38d17itvSwRGXLbWkNKKzTfvOxpUVA==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ded02c3-4922-457a-a568-9fe22fd88676",
                            TwoFactorEnabled = false,
                            UserName = "denizcakir"
                        },
                        new
                        {
                            Id = "509743b4-0039-49cc-a085-888c0a3904e1",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "c92cc36f-0bfb-4b80-8144-d23a79bbad12",
                            DateOfBirth = new DateTime(2002, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetyilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETYILMAZ@GMAİL.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEAYqkImUgTaE+XawX6uBJqBeE715i/ZR6ccAWCRHGZh1igpx89YUqxKdVcC6c1RZ5w==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ad6c33a-c2f8-47e2-beff-872353cf24e4",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = "d07aee42-6694-4aaa-90ab-d421155be0ca",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "244ed901-5fbe-42d8-949b-aa7a4ae65797",
                            DateOfBirth = new DateTime(2001, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.demir@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.DEMIR@YAHOO.COM",
                            NormalizedUserName = "AYSEDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEGypN7wYaE1OwamyV1u1yzf6wswUwCr+AMuSiehwacONQ4oL8kUaAVVaitEup6cwug==",
                            Phone = "5329876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9100c182-8144-408a-8925-3f6572c8fc6a",
                            TwoFactorEnabled = false,
                            UserName = "aysedemir"
                        },
                        new
                        {
                            Id = "32ee0803-e82c-4437-9fd5-1741d30ff5da",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "bf014457-b742-4b81-bfc4-21b83d0beccb",
                            DateOfBirth = new DateTime(2009, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmetkaya@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETKAYA@HOTMAIL.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAENICASb7sm3rJUqUhNLELlAYoHDn3pD9mfVaFOuWIDyoDqb8r/YD/f4z8u2z7dhF4Q==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "def5e7df-d74b-4404-b25c-561837496de2",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "f766d0b1-3add-423d-a2c4-1cb4a3042b77",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "8ae65703-cd51-408d-a31d-f4db661f7dcf",
                            DateOfBirth = new DateTime(2003, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatmasahin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMASAHIN@GMAIL.COM",
                            NormalizedUserName = "FATMASAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDjI91KCSl5YkBAYLls8U5gDRXAAZk7pOHrEw7eWo+RZJ8RZ30Z0/LugDIA5Ym1fjw==",
                            Phone = "5334567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "886aa841-eba8-45e3-8d8f-959f7079be1a",
                            TwoFactorEnabled = false,
                            UserName = "fatmasahin"
                        },
                        new
                        {
                            Id = "497a4b44-a872-461b-af06-9bdb0328a5c4",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "5971731f-1740-41a3-b745-4dafcd852f36",
                            DateOfBirth = new DateTime(2008, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emreakin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Akın",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMREAKIN@HOTMAIL.COM",
                            NormalizedUserName = "EMREAKIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGgbNpKLpfiOcWMSY5Yp7KsrBlDGKDa4e1qbIS3OrXMeWvvJFc6+PvXrsZGkBQftuA==",
                            Phone = "5379876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed1d5601-abb2-4436-951b-68dbf7668171",
                            TwoFactorEnabled = false,
                            UserName = "emreakin"
                        },
                        new
                        {
                            Id = "d7fc1a90-617a-47eb-8415-5741efc77ba3",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "75952f5b-032e-403a-bbb5-3208f2d292fe",
                            DateOfBirth = new DateTime(2005, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynepturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Türk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEPTURK@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEMpp5DhsWcVkLnv7HNAuCtiLIAYZhmr40+PyO80Ues17Cc/0NJGPvAkjmEiO7QmX3w==",
                            Phone = "5336549872",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7efc73a9-cb6f-463f-ad4c-0fdeaf83cf42",
                            TwoFactorEnabled = false,
                            UserName = "zeynepturk"
                        },
                        new
                        {
                            Id = "2890d2d0-2eb0-43f0-8a38-2e62d8263aa8",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "1033451f-6196-4845-9b93-2513a24ba2aa",
                            DateOfBirth = new DateTime(2007, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEPM7hwf2x1P+mcQcjI/7BzQww7QWLpM3o9caZJDVuCGGhkJFOQLFfXcZzEJWpwQTcQ==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b103905-7494-46dd-94a6-357305c808b8",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz"
                        },
                        new
                        {
                            Id = "334fc8ed-7af0-48e8-99ba-065c9ef4f61f",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "012b802a-2407-46ce-83fa-c2041058ba34",
                            DateOfBirth = new DateTime(2009, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mustafaozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mustafa",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUSTAFAOZKAN@GMAIL.COM",
                            NormalizedUserName = "MUSTAFAOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGnDyb/jjhEFuR5DwZdWvMinI4zdWwK+gjUNE1GzKIYHSixePG3/eJL2eZmq7U3EPg==",
                            Phone = "5423456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d17540c8-3b16-4eb8-b59f-13aec5fd7a6f",
                            TwoFactorEnabled = false,
                            UserName = "mustafaozkan"
                        },
                        new
                        {
                            Id = "16f50864-2a00-4aca-b160-e5d6719ec3f8",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "03510975-e6ee-4130-8099-36ed73b28744",
                            DateOfBirth = new DateTime(2008, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRAAYDIN@HOTMAIL.COM",
                            NormalizedUserName = "ESRAAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9LtRguMR8HkAXNbtreRlg7nTGmQec7baMqzxdiM4WcpWmEu4des1Qs4o6yy1FKow==",
                            Phone = "5397891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df292d9c-0254-4906-a2ad-35c8ea46f01e",
                            TwoFactorEnabled = false,
                            UserName = "esraaydin"
                        },
                        new
                        {
                            Id = "92e79f96-3a9c-4382-8203-483f63b26b3d",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "f6168a20-ad5c-45c6-8623-d05fcf3cbf4c",
                            DateOfBirth = new DateTime(1980, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selinkar@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            ImageId = 1,
                            LastName = "Kar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELINKAR@HOTMAIL.COM",
                            NormalizedUserName = "SELINKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEKiVUrT3T9GZd2vOGHJ+GMIJ1d0SE2Y1/nPBaC4LZs1RbGTJoJ0bTMgZSXyjp+GWfw==",
                            Phone = "5399782513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48f9b339-bb08-4369-bd44-9cd32bce3fb2",
                            TwoFactorEnabled = false,
                            UserName = "selinkar"
                        },
                        new
                        {
                            Id = "f6e4f04e-e4f0-4872-be83-7e4f2bae4d5a",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "6961047f-0a07-4423-bcad-f384c9c6d6b3",
                            DateOfBirth = new DateTime(1990, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cem.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cem",
                            Gender = "Erkek",
                            ImageId = 2,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEM.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "CEMYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEDr2CNzfFUpmfA9+o6DPc/+57/ZA7/meCsy+ROlHGbK7B59i216Xxx/ItF74Y0guig==",
                            Phone = "5323456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14ad8a05-8d84-42ba-a55d-1ecff9c6dc07",
                            TwoFactorEnabled = false,
                            UserName = "cemyilmaz"
                        },
                        new
                        {
                            Id = "38d6d1dc-2173-4fd4-afd5-d75892fbbe7b",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "7ca59165-6a54-4dfc-b18f-6475927df06c",
                            DateOfBirth = new DateTime(1992, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şevval",
                            Gender = "Kadın",
                            ImageId = 3,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "sevval.demir@hotmail.com",
                            NormalizedUserName = "SEVVALDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAELqhRXjjtlCB47EYT2GuYT1EJU3gVmD4UGHFp+Rg0TSTDKWD84eE2gN95HuvOlxWKQ==",
                            Phone = "5387891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c37a0f17-20e0-48c4-88a1-c666beaba547",
                            TwoFactorEnabled = false,
                            UserName = "sevvaldemir"
                        },
                        new
                        {
                            Id = "603da648-462b-4bc9-939e-32da8516728f",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "34e90e41-feda-4f4d-92c2-63b2454c38aa",
                            DateOfBirth = new DateTime(1994, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 4,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAENA/2MSvSgsRSQC2k10WQAQt9aDWkvWa/SScd3fMXWe+/2c+od7uNPdpS9tiXG3e2w==",
                            Phone = "5336549876",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c54728a-4cd3-48a7-bf4f-5c9100bf80aa",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildiz"
                        },
                        new
                        {
                            Id = "ad332839-585e-4b96-8e73-0d7bcf2aaafe",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "c4d68efc-896a-4af6-8d43-2f9c52188d40",
                            DateOfBirth = new DateTime(1980, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gul.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gül",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUL.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "GULSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6kUACXYORYWND1el2k5Eu6cdg71TUYuZdNQUTqWo601mPAvqE9vCMbWnyxd2zb2g==",
                            Phone = "5361234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d85abdc-a8fc-4afd-8f4e-897cdef5e49b",
                            TwoFactorEnabled = false,
                            UserName = "gulsahin"
                        },
                        new
                        {
                            Id = "914e0197-3fd4-4310-872d-605d520fe948",
                            AccessFailedCount = 0,
                            City = "Kayseri",
                            ConcurrencyStamp = "f6e39ae5-114e-409c-9d83-91266d333bee",
                            DateOfBirth = new DateTime(1987, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemal.kaya@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMAL.KAYA@GMAIL.COM",
                            NormalizedUserName = "KEMALKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJdu0QfBOxZRuvxufdk8IuLjGisZzjKAzuuSoqtqzanRorLeEMsm0tLpMCbE9+3pfQ==",
                            Phone = "5359876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74431dd6-9952-4e2a-9421-c71752897ea0",
                            TwoFactorEnabled = false,
                            UserName = "kemalkaya"
                        },
                        new
                        {
                            Id = "73087a08-ad7c-4e46-852d-c6ebb03a1223",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "0f54a220-60e1-4991-a735-a0e6488478e5",
                            DateOfBirth = new DateTime(1990, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gokhan.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gökhan",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GOKHANAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOrtsh4Q8mLXTauab6YiDkZtsh1YgyGhX0reFHyIaZJj9WpTWY71zMhPF0IGYi3efg==",
                            Phone = "5321234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "139ad18c-da24-4ad5-befd-cf4cae5ba780",
                            TwoFactorEnabled = false,
                            UserName = "gokhanaydin"
                        },
                        new
                        {
                            Id = "ef5532ea-9bc5-4f88-9a2a-5e538b399614",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "03aed046-228a-42ad-b4c9-5460385e49d5",
                            DateOfBirth = new DateTime(1992, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seyma.yilmaz@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şeyma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEYMA.YILMAZ@HOTMAIL.COM",
                            NormalizedUserName = "SEYMAYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEKpHghymmQ//z2B13VeinUzLJ+BAilNVDe2l6ZzFUvuvS5eNvik4fyxzdU6u8FxDDg==",
                            Phone = "5399876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e0d16fb-29d8-4600-9e5a-cf377a8f8bed",
                            TwoFactorEnabled = false,
                            UserName = "seymayilmaz"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 480, DateTimeKind.Local).AddTicks(5749),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 480, DateTimeKind.Local).AddTicks(5755),
                            Url = "teacher-1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 480, DateTimeKind.Local).AddTicks(5762),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 480, DateTimeKind.Local).AddTicks(5764),
                            Url = "teacher-2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 480, DateTimeKind.Local).AddTicks(5769),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 480, DateTimeKind.Local).AddTicks(5771),
                            Url = "teacher-3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 480, DateTimeKind.Local).AddTicks(5776),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 480, DateTimeKind.Local).AddTicks(5778),
                            Url = "teacher-4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 480, DateTimeKind.Local).AddTicks(5782),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 30, 480, DateTimeKind.Local).AddTicks(5784),
                            Url = "resimyok.jpg"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TeacherId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8123),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8162),
                            UserId = "8eb2fa77-dfdc-4ccc-970d-ad824a9703e3"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8220),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8224),
                            UserId = "509743b4-0039-49cc-a085-888c0a3904e1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8235),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8239),
                            UserId = "d07aee42-6694-4aaa-90ab-d421155be0ca"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8249),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8252),
                            UserId = "32ee0803-e82c-4437-9fd5-1741d30ff5da"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8261),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8265),
                            UserId = "f766d0b1-3add-423d-a2c4-1cb4a3042b77"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8278),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8282),
                            UserId = "497a4b44-a872-461b-af06-9bdb0328a5c4"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8292),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8295),
                            UserId = "d7fc1a90-617a-47eb-8415-5741efc77ba3"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8304),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8308),
                            UserId = "2890d2d0-2eb0-43f0-8a38-2e62d8263aa8"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8317),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8321),
                            UserId = "334fc8ed-7af0-48e8-99ba-065c9ef4f61f"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8334),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8338),
                            UserId = "16f50864-2a00-4aca-b160-e5d6719ec3f8"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8599),
                            Graduation = "Çanakkale Onsekiz Mart Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8604),
                            UserId = "92e79f96-3a9c-4382-8203-483f63b26b3d"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8645),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8650),
                            UserId = "f6e4f04e-e4f0-4872-be83-7e4f2bae4d5a"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8661),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8665),
                            UserId = "38d6d1dc-2173-4fd4-afd5-d75892fbbe7b"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8675),
                            Graduation = "Ege Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8680),
                            UserId = "603da648-462b-4bc9-939e-32da8516728f"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8690),
                            Graduation = "Akdeniz Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8694),
                            UserId = "ad332839-585e-4b96-8e73-0d7bcf2aaafe"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8706),
                            Graduation = "Erciyes Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8711),
                            UserId = "914e0197-3fd4-4310-872d-605d520fe948"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8722),
                            Graduation = "Çukurova Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8725),
                            UserId = "73087a08-ad7c-4e46-852d-c6ebb03a1223"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8735),
                            Graduation = "Uludağ Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 7, 16, 57, 26, 875, DateTimeKind.Local).AddTicks(8738),
                            UserId = "ef5532ea-9bc5-4f88-9a2a-5e538b399614"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 5,
                            BranchId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            BranchId = 6
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 9
                        },
                        new
                        {
                            TeacherId = 8,
                            BranchId = 10
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Advert", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Adverts")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Order")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Order", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Order");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrivateLesson.Data.Concrete.EfCore.Context;

#nullable disable

namespace PrivateLesson.Data.Migrations
{
    [DbContext(typeof(PrivateLessonContext))]
    partial class PrivateLessonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "29d7ab6f-9b07-40a6-9d56-d3df22c4365d",
                            RoleId = "31dc642c-b780-4cfd-a253-fa5bcdb2c574"
                        },
                        new
                        {
                            UserId = "28e85c10-3800-4a53-9961-96f4e1f4186c",
                            RoleId = "80108e5d-aa70-42f2-ab65-c38208c28a8b"
                        },
                        new
                        {
                            UserId = "2e75a9a7-25d8-4521-91f7-27fd8c9919b6",
                            RoleId = "80108e5d-aa70-42f2-ab65-c38208c28a8b"
                        },
                        new
                        {
                            UserId = "3ca65c7c-ca6a-49d0-b00d-70b475e5979c",
                            RoleId = "80108e5d-aa70-42f2-ab65-c38208c28a8b"
                        },
                        new
                        {
                            UserId = "d15d36c0-f706-4323-aa37-74024adb3291",
                            RoleId = "80108e5d-aa70-42f2-ab65-c38208c28a8b"
                        },
                        new
                        {
                            UserId = "f3639403-467a-4c34-88bd-c855ca583925",
                            RoleId = "80108e5d-aa70-42f2-ab65-c38208c28a8b"
                        },
                        new
                        {
                            UserId = "6b84c195-30c2-4e06-98cb-f6e5665264eb",
                            RoleId = "80108e5d-aa70-42f2-ab65-c38208c28a8b"
                        },
                        new
                        {
                            UserId = "a187f91d-c6b3-4041-aae2-dbba299ffc44",
                            RoleId = "80108e5d-aa70-42f2-ab65-c38208c28a8b"
                        },
                        new
                        {
                            UserId = "86af69bf-cc78-4264-870a-49137c75556c",
                            RoleId = "80108e5d-aa70-42f2-ab65-c38208c28a8b"
                        },
                        new
                        {
                            UserId = "94c61502-2554-4b39-9bf1-f7854310337c",
                            RoleId = "80108e5d-aa70-42f2-ab65-c38208c28a8b"
                        },
                        new
                        {
                            UserId = "66b89ddf-f1e2-4254-aad9-b6e5534bc1e6",
                            RoleId = "80108e5d-aa70-42f2-ab65-c38208c28a8b"
                        },
                        new
                        {
                            UserId = "89d7b0eb-69b6-4941-a414-4fd4df08456c",
                            RoleId = "27049112-ce59-4d38-befd-91575888e8a5"
                        },
                        new
                        {
                            UserId = "31e2943c-14c9-42d3-96a0-fd704a964c82",
                            RoleId = "27049112-ce59-4d38-befd-91575888e8a5"
                        },
                        new
                        {
                            UserId = "4b3ccc9e-7a5e-4cf5-8955-e705047afdfe",
                            RoleId = "27049112-ce59-4d38-befd-91575888e8a5"
                        },
                        new
                        {
                            UserId = "57252b05-f93d-4ff6-8f44-428f7575a032",
                            RoleId = "27049112-ce59-4d38-befd-91575888e8a5"
                        },
                        new
                        {
                            UserId = "4c9f733d-222e-4384-a9b0-b04e63e53280",
                            RoleId = "27049112-ce59-4d38-befd-91575888e8a5"
                        },
                        new
                        {
                            UserId = "475f90ef-58eb-4859-82a8-6f0ae71eac16",
                            RoleId = "27049112-ce59-4d38-befd-91575888e8a5"
                        },
                        new
                        {
                            UserId = "76ebe4bc-a654-4efc-8ec1-6eff31f247d9",
                            RoleId = "27049112-ce59-4d38-befd-91575888e8a5"
                        },
                        new
                        {
                            UserId = "2f2c96bb-12de-40e1-9127-4b3617d0f4ad",
                            RoleId = "27049112-ce59-4d38-befd-91575888e8a5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matamatik",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4145),
                            Description = "Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4153),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Fizik",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4157),
                            Description = "Fizik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4158),
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4160),
                            Description = "Kimya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4160),
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Biyoloji",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4162),
                            Description = "Biyoloji Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4162),
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Tarih",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4163),
                            Description = "Tarih Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4164),
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Coğrafya",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4165),
                            Description = "Coğrafya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4166),
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4167),
                            Description = "İngilizce Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4167),
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Almanca",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4169),
                            Description = "Almanca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4169),
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Fransızca",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4170),
                            Description = "Fransızca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4171),
                            Url = "fransizca"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Felsefe",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4172),
                            Description = "Felsefe Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4172),
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 11,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4174),
                            Description = "Müzik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4174),
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 12,
                            BranchName = "Resim",
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4176),
                            Description = "Resim Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(4176),
                            Url = "resim"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "31dc642c-b780-4cfd-a253-fa5bcdb2c574",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "27049112-ce59-4d38-befd-91575888e8a5",
                            Description = "Öğretmenler",
                            Name = "Ogretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "80108e5d-aa70-42f2-ab65-c38208c28a8b",
                            Description = "Öğrenciler",
                            Name = "Ogrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "29d7ab6f-9b07-40a6-9d56-d3df22c4365d",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "fdf7b513-ac36-4060-a56b-5cc3a49df7f9",
                            DateOfBirth = new DateTime(1998, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetovali1903@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            LastName = "Ovalı",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETOVALI1903@GMAIL.COM",
                            NormalizedUserName = "AHMETOVALI",
                            PasswordHash = "AQAAAAIAAYagAAAAECnZg6/idbLF5Np2jdxQWAvjZhBwgfxe0LdqVGu62sN1tdtCFMwFDCgaAzz5eiR0ZQ==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6591ff91-8bb9-4995-b74c-f8ddd20c5176",
                            TwoFactorEnabled = false,
                            UserName = "ahmetovali"
                        },
                        new
                        {
                            Id = "28e85c10-3800-4a53-9961-96f4e1f4186c",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "21555c75-8040-4d68-9e39-74fa93c1f208",
                            DateOfBirth = new DateTime(1988, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEMmQXkbXi+8Qcu8d0+eUZw+bfCYmaBUvd9SWLowKll1CZaEJvb19ZFMNkw1W5PSQNw==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ad0f15b-9a62-4994-bedf-399e84ef3d24",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = "2e75a9a7-25d8-4521-91f7-27fd8c9919b6",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "e236fb2f-dcbe-42e5-8ae4-c024efb65190",
                            DateOfBirth = new DateTime(1995, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selin.ozcan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            LastName = "Özcan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELIN.OZCAN@EXAMPLE.COM",
                            NormalizedUserName = "SELINOZCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmOalm/n+3su7c211U3W9/999WJnBl1JXfEffPThPK0QRNWuwN4DMcnRVevFxxkMA==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa1a3972-d661-4e5d-977b-dbfde966b673",
                            TwoFactorEnabled = false,
                            UserName = "selinozcan"
                        },
                        new
                        {
                            Id = "3ca65c7c-ca6a-49d0-b00d-70b475e5979c",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "ec213b02-ea46-463b-8778-986ac136a077",
                            DateOfBirth = new DateTime(1990, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.kaya@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.KAYA@EXAMPLE.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJr8XmO81vNScFkultyApXkFKSyxcKVcxa9vzIB+bBiaZoBQmsZtTjNYPqejA+QASw==",
                            Phone = "5551112233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b063368-4f00-4711-8bf7-5b5a7d0dd9b8",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "d15d36c0-f706-4323-aa37-74024adb3291",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "8fb3baa5-8b9b-4a80-b6dc-7020a5c13779",
                            DateOfBirth = new DateTime(1998, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seda.dogan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Seda",
                            Gender = "Kadın",
                            LastName = "Doğan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEDA.DOGAN@EXAMPLE.COM",
                            NormalizedUserName = "SEDADOGAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEjowSiyRdJO3aQUViS9/PgsqV3u1zAY6k1WR36SJL2wBG+YJOR5/pO8gE7T9vTV4w==",
                            Phone = "5554445566",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6de90389-2ac4-4c12-9e77-45864b034962",
                            TwoFactorEnabled = false,
                            UserName = "sedadogan"
                        },
                        new
                        {
                            Id = "f3639403-467a-4c34-88bd-c855ca583925",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "673cddc9-abb3-4001-b2eb-4def20277844",
                            DateOfBirth = new DateTime(1985, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "murat.gunes@example.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = "Erkek",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURAT.GUNES@EXAMPLE.COM",
                            NormalizedUserName = "MURATGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAEM+dRcl7jGUjyv7cWDNl/MDCrreoIWuLmF5YzxDkrh6AhjeKYZppZaz3SBdx1juD7Q==",
                            Phone = "5558889999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6f8a8d2-4b9c-4e1b-b27f-e9307b07504c",
                            TwoFactorEnabled = false,
                            UserName = "muratgunes"
                        },
                        new
                        {
                            Id = "6b84c195-30c2-4e06-98cb-f6e5665264eb",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "8db3f7ac-8504-4e29-ada9-552849df940a",
                            DateOfBirth = new DateTime(1991, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "AYSEYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEEf8fveM7UAb8XNC5OYzHInw28sqOYE0NcnB6YIdhw2UITqAt1VM7+Aqdgi/K3ksuQ==",
                            Phone = "5553334444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f92dd67a-d88b-4d48-84c5-20ed1a5a3fef",
                            TwoFactorEnabled = false,
                            UserName = "ayseyildiz"
                        },
                        new
                        {
                            Id = "a187f91d-c6b3-4041-aae2-dbba299ffc44",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "a7e13458-daf3-4817-befb-b64b34f5a74f",
                            DateOfBirth = new DateTime(1980, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ercan.ozturk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ercan",
                            Gender = "Erkek",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERCAN.OZTURK@EXAMPLE.COM",
                            NormalizedUserName = "ERCANOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEGO2g+R6lp1haWli8MNP+GdOsjuM9RIUqkQB69NT109x+6+aCNrIOHQXB7HwmdGErA==",
                            Phone = "5552223344",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fefd629c-de62-45ee-a4b0-9ad5a989a16a",
                            TwoFactorEnabled = false,
                            UserName = "ercanozturk"
                        },
                        new
                        {
                            Id = "86af69bf-cc78-4264-870a-49137c75556c",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "581e4aa3-53ae-4a07-bfa0-ad38527d76a7",
                            DateOfBirth = new DateTime(1996, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.guler@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Güler",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.GULER@EXAMPLE.COM",
                            NormalizedUserName = "ALIGULER",
                            PasswordHash = "AQAAAAIAAYagAAAAEFyIfPrifjEEeo/ZZkrAMvzyc27U4k8JN/v7i+E10cmKSW5tRlMd2ch2mp89El/yzA==",
                            Phone = "5557778899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25b21c5e-2e7a-49fb-84c6-eb3bb4625fbd",
                            TwoFactorEnabled = false,
                            UserName = "aliguler"
                        },
                        new
                        {
                            Id = "94c61502-2554-4b39-9bf1-f7854310337c",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "7f16b922-ea00-4ee5-9487-4ac78e6b86c8",
                            DateOfBirth = new DateTime(1992, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hatice.aydin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Hatice",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "HATICE.AYDIN@EXAMPLE.COM",
                            NormalizedUserName = "HATICEAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAED6a2DVTjrH/Z91dLv/2kP6WrzuPismL0NoUxLZqgptQzI0MniDOUiQsaJw4jDLyog==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f966768b-3b4a-475e-b658-81ee4c4a203b",
                            TwoFactorEnabled = false,
                            UserName = "haticeaydin"
                        },
                        new
                        {
                            Id = "66b89ddf-f1e2-4254-aad9-b6e5534bc1e6",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "95e9fb11-c34c-4bae-b3e7-b95c3d61d65d",
                            DateOfBirth = new DateTime(1987, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mert.kilic@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mert",
                            Gender = "Erkek",
                            LastName = "Kılıç",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT.KILIC@EXAMPLE.COM",
                            NormalizedUserName = "MERTKILIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEDH3xhz5Z7m9sMwsesa+B9VnRjgE6O9+yAj8PsUuFKYcEAF2iAD7vzy3hseQ0+ADIg==",
                            Phone = "5551112233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efbdd84f-828c-4b15-af10-a2d8ee1b2ffc",
                            TwoFactorEnabled = false,
                            UserName = "mertkilic"
                        },
                        new
                        {
                            Id = "89d7b0eb-69b6-4941-a414-4fd4df08456c",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "ff17353c-b871-4cf4-8fc8-e263e2a39306",
                            DateOfBirth = new DateTime(1994, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asli.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Aslı",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASLI.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "ASLIYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAENzUQO8RbLgC6FA0F+/nQcOgDn+3Nd2YjoyP2INxqY5Bxb1JHuyQZ4esFzmm7zNJ1A==",
                            Phone = "5555556677",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "144d0b59-851f-4c91-9e57-8120bb180bf7",
                            TwoFactorEnabled = false,
                            UserName = "asliyilmaz"
                        },
                        new
                        {
                            Id = "31e2943c-14c9-42d3-96a0-fd704a964c82",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "c149299a-473b-44a0-b1d9-fdc1e85c6727",
                            DateOfBirth = new DateTime(1991, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emre.yildir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            LastName = "Yıldır",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE.YILDIR@EXAMPLE.COM",
                            NormalizedUserName = "EMREYILDIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEPvjgsuMsADoUxCnhSe31x3a+f0tyxzZ69zzBACxeu4902IHx5v++coWqSagKs1u9Q==",
                            Phone = "5558887744",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5d715f3-cc77-4ccb-b7ea-2612958bade1",
                            TwoFactorEnabled = false,
                            UserName = "emreyildir"
                        },
                        new
                        {
                            Id = "4b3ccc9e-7a5e-4cf5-8955-e705047afdfe",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "47744209-81ad-4273-a8cc-02f6907c8ede",
                            DateOfBirth = new DateTime(1985, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ebru.ozturk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ebru",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "EBRU.OZTURK@EXAMPLE.COM",
                            NormalizedUserName = "EBRUOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEEq81MHvJUxdBQazhmQVEbAIFvKsQIDRnhgLcghhAiErOB7xBQAIwkGJMeFRXddi1A==",
                            Phone = "5552221133",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40a6ac50-19d0-44b3-9910-6a9f209143dd",
                            TwoFactorEnabled = false,
                            UserName = "ebruozturk"
                        },
                        new
                        {
                            Id = "57252b05-f93d-4ff6-8f44-428f7575a032",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "8d3eff63-42ca-474b-9c7c-1d242dfa9c7c",
                            DateOfBirth = new DateTime(1999, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "umut.celik@example.com",
                            EmailConfirmed = true,
                            FirstName = "Umut",
                            Gender = "Erkek",
                            LastName = "Çelik",
                            LockoutEnabled = false,
                            NormalizedEmail = "UMUT.CELIK@EXAMPLE.COM",
                            NormalizedUserName = "UMUTCELIK",
                            PasswordHash = "AQAAAAIAAYagAAAAEIvWv/8AxTBxdqy2BnUX0f7nbpbAkjF/vBi+wwHSfPKD2WpQf2JF3IYJhiYZbEArIA==",
                            Phone = "5552223344",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "534d5cc4-6e58-488a-ab2d-f5e0f08d1f21",
                            TwoFactorEnabled = false,
                            UserName = "umutcelik"
                        },
                        new
                        {
                            Id = "4c9f733d-222e-4384-a9b0-b04e63e53280",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "0f706797-80cd-4cc3-959d-3f5ab204e871",
                            DateOfBirth = new DateTime(1988, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aylin.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Aylin",
                            Gender = "Kadın",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYLIN.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "AYLINDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDbqctN6I4FncxJzV5BLXiKuDA0RDxpKuJ623SNQpPn7z510MAMm6Z92ZnYas6aVnQ==",
                            Phone = "5557779900",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "477aa8f5-26e3-4466-b020-b68b3728fdf0",
                            TwoFactorEnabled = false,
                            UserName = "aylindemir"
                        },
                        new
                        {
                            Id = "475f90ef-58eb-4859-82a8-6f0ae71eac16",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "358ae5b7-cfd8-4c2d-9ec9-72d9b8e530b6",
                            DateOfBirth = new DateTime(1997, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "murat.can@example.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = "Erkek",
                            LastName = "Can",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURAT.CAN@EXAMPLE.COM",
                            NormalizedUserName = "MURATCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJV5TNgXtO9OD76sA8bwdypsM6/j66GWxM4FYU5EtMx1RwZnlkf6nWvC21ubCznQpA==",
                            Phone = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11443373-6525-46b2-94e0-9b73acc521ce",
                            TwoFactorEnabled = false,
                            UserName = "muratcan"
                        },
                        new
                        {
                            Id = "76ebe4bc-a654-4efc-8ec1-6eff31f247d9",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "84238209-3218-47de-8221-e4ec5aa4dba9",
                            DateOfBirth = new DateTime(1994, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elif.akyildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            Gender = "Kadın",
                            LastName = "Akyıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF.AKYILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "ELIFAKYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEJFk44nASTtREdE5DkSpRAnWtEAxHzPHGJW9/8PCMWSmxo2UwtmkTUn7v7ZYq/OxWw==",
                            Phone = "5558887766",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4077a8a8-0f62-4b57-b26c-c6f819412159",
                            TwoFactorEnabled = false,
                            UserName = "elifakyildiz"
                        },
                        new
                        {
                            Id = "2f2c96bb-12de-40e1-9127-4b3617d0f4ad",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "544fc094-edb0-4869-96d3-5d8e134877a8",
                            DateOfBirth = new DateTime(1992, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "goksu.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Göksu",
                            Gender = "Kadın",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKSU.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "GOKSUDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDtmbskNPUKQwwwVQfS7wKb8V2T5fTSiEfr7E7IjnqEluuopN+YTQLBUx3s4e1bzeQ==",
                            Phone = "5554443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "154f09f9-3d96-4426-b14e-35b633b53994",
                            TwoFactorEnabled = false,
                            UserName = "goksudemir"
                        },
                        new
                        {
                            Id = "89415615-faeb-4a23-ba99-76f1099866d7",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "1b888ff3-b044-43ac-8036-ae45a4e6f24f",
                            DateOfBirth = new DateTime(1985, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emre.yildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE.YILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "EMREYILDIZ",
                            Phone = "5301234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f18e5856-6b9d-4764-8022-4e55027ce78a",
                            TwoFactorEnabled = false,
                            UserName = "emreyildiz"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(6290),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(6292),
                            Url = "1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(6294),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(6294),
                            Url = "2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(6296),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(6296),
                            Url = "3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(6297),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(6298),
                            Url = "4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(6299),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 15, 763, DateTimeKind.Local).AddTicks(6299),
                            Url = "5.jpg"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9811),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9830),
                            UserId = "28e85c10-3800-4a53-9961-96f4e1f4186c"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9852),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9853),
                            UserId = "2e75a9a7-25d8-4521-91f7-27fd8c9919b6"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9858),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9859),
                            UserId = "3ca65c7c-ca6a-49d0-b00d-70b475e5979c"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9863),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9864),
                            UserId = "d15d36c0-f706-4323-aa37-74024adb3291"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9869),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9871),
                            UserId = "f3639403-467a-4c34-88bd-c855ca583925"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9875),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9877),
                            UserId = "6b84c195-30c2-4e06-98cb-f6e5665264eb"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9880),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9881),
                            UserId = "a187f91d-c6b3-4041-aae2-dbba299ffc44"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9885),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9886),
                            UserId = "86af69bf-cc78-4264-870a-49137c75556c"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9889),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9890),
                            UserId = "94c61502-2554-4b39-9bf1-f7854310337c"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9896),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 908, DateTimeKind.Local).AddTicks(9897),
                            UserId = "66b89ddf-f1e2-4254-aad9-b6e5534bc1e6"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(5),
                            Graduation = "Kırıkkale Üniversitesi",
                            ImageId = 1,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(7),
                            UserId = "89d7b0eb-69b6-4941-a414-4fd4df08456c"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(36),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            ImageId = 2,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(38),
                            UserId = "31e2943c-14c9-42d3-96a0-fd704a964c82"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(42),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            ImageId = 3,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(43),
                            UserId = "4b3ccc9e-7a5e-4cf5-8955-e705047afdfe"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(47),
                            Graduation = "Yıldız Teknik Üniversitesi",
                            ImageId = 4,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(48),
                            UserId = "57252b05-f93d-4ff6-8f44-428f7575a032"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(52),
                            Graduation = "Akdeniz Üniversitesi",
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(53),
                            UserId = "4c9f733d-222e-4384-a9b0-b04e63e53280"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(59),
                            Graduation = "Erciyes Üniversitesi",
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(60),
                            UserId = "475f90ef-58eb-4859-82a8-6f0ae71eac16"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(64),
                            Graduation = "Çukurova Üniversitesi",
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(65),
                            UserId = "76ebe4bc-a654-4efc-8ec1-6eff31f247d9"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(69),
                            Graduation = "Uludağ Üniversitesi",
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 28, 16, 19, 13, 909, DateTimeKind.Local).AddTicks(70),
                            UserId = "2f2c96bb-12de-40e1-9127-4b3617d0f4ad"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 5,
                            BranchId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            BranchId = 6
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 9
                        },
                        new
                        {
                            TeacherId = 8,
                            BranchId = 10
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrivateLesson.Data.Concrete.EfCore.Context;

#nullable disable

namespace PrivateLesson.Data.Migrations
{
    [DbContext(typeof(PrivateLessonContext))]
    partial class PrivateLessonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8a03a184-1824-4a87-a987-5cd817de817f",
                            RoleId = "1a979822-46da-47c0-8201-2f42940437c3"
                        },
                        new
                        {
                            UserId = "1822a0ca-0a7e-4da4-a026-a5a50a1b5305",
                            RoleId = "9070f98f-7a4b-4736-9d01-4802ed61c9a4"
                        },
                        new
                        {
                            UserId = "de847b0a-2b0a-437f-ab4e-f5518b47fee3",
                            RoleId = "9070f98f-7a4b-4736-9d01-4802ed61c9a4"
                        },
                        new
                        {
                            UserId = "05a6cf7c-d1ec-4e40-bd37-5bace524ad61",
                            RoleId = "9070f98f-7a4b-4736-9d01-4802ed61c9a4"
                        },
                        new
                        {
                            UserId = "11f41da4-01a5-49bb-a297-915ddbc0d5e9",
                            RoleId = "9070f98f-7a4b-4736-9d01-4802ed61c9a4"
                        },
                        new
                        {
                            UserId = "a0b429a4-a53a-45a4-bfd7-2612852f42fe",
                            RoleId = "9070f98f-7a4b-4736-9d01-4802ed61c9a4"
                        },
                        new
                        {
                            UserId = "0cf978b8-770b-4f35-8549-52ab3e4d7900",
                            RoleId = "9070f98f-7a4b-4736-9d01-4802ed61c9a4"
                        },
                        new
                        {
                            UserId = "3310c3e0-ce2e-44bd-9a98-730ee7e12a8b",
                            RoleId = "9070f98f-7a4b-4736-9d01-4802ed61c9a4"
                        },
                        new
                        {
                            UserId = "f2d6854b-2750-4c58-a2fe-77465cfc0742",
                            RoleId = "9070f98f-7a4b-4736-9d01-4802ed61c9a4"
                        },
                        new
                        {
                            UserId = "1d9475a9-c2e3-4513-83f1-92fa5171f945",
                            RoleId = "9070f98f-7a4b-4736-9d01-4802ed61c9a4"
                        },
                        new
                        {
                            UserId = "a8c58153-e6d7-40eb-9eb5-b6421facc7ca",
                            RoleId = "9070f98f-7a4b-4736-9d01-4802ed61c9a4"
                        },
                        new
                        {
                            UserId = "a1ea0889-d095-4621-91da-94c311ce9098",
                            RoleId = "6009bdd4-c680-4b31-b711-1c23c8b1e2e2"
                        },
                        new
                        {
                            UserId = "8f17cfed-a964-4bd5-89cd-60075c729df8",
                            RoleId = "6009bdd4-c680-4b31-b711-1c23c8b1e2e2"
                        },
                        new
                        {
                            UserId = "a95f875e-e710-4634-a13e-90078cc08f72",
                            RoleId = "6009bdd4-c680-4b31-b711-1c23c8b1e2e2"
                        },
                        new
                        {
                            UserId = "ac11d4e5-08bb-41fb-bf73-adfebc8430bf",
                            RoleId = "6009bdd4-c680-4b31-b711-1c23c8b1e2e2"
                        },
                        new
                        {
                            UserId = "a894e4ef-5068-4a94-9062-dc150c6f802a",
                            RoleId = "6009bdd4-c680-4b31-b711-1c23c8b1e2e2"
                        },
                        new
                        {
                            UserId = "fbd7257a-6e9e-4689-9803-a9c8b0111fb8",
                            RoleId = "6009bdd4-c680-4b31-b711-1c23c8b1e2e2"
                        },
                        new
                        {
                            UserId = "73bfb08d-6f47-4016-adb4-a437dd8d09bc",
                            RoleId = "6009bdd4-c680-4b31-b711-1c23c8b1e2e2"
                        },
                        new
                        {
                            UserId = "0601b97c-9713-4f14-9fb2-91b04c121a42",
                            RoleId = "6009bdd4-c680-4b31-b711-1c23c8b1e2e2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Adverts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 4,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 646, DateTimeKind.Local).AddTicks(6034),
                            Description = "ilan",
                            IsApproved = true,
                            Price = 45m,
                            TeacherId = 4,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 646, DateTimeKind.Local).AddTicks(6040),
                            Url = "ilan"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(955),
                            Description = "Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(962),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Fizik",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(967),
                            Description = "Fizik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(968),
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(970),
                            Description = "Kimya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(970),
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Biyoloji",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(972),
                            Description = "Biyoloji Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(972),
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Tarih",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(974),
                            Description = "Tarih Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(974),
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Coğrafya",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(976),
                            Description = "Coğrafya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(977),
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(978),
                            Description = "İngilizce Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(979),
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Almanca",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(980),
                            Description = "Almanca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(981),
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Fransızca",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(982),
                            Description = "Fransızca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(983),
                            Url = "fransizca"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Felsefe",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(984),
                            Description = "Felsefe Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(985),
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 11,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(986),
                            Description = "Müzik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(987),
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 12,
                            BranchName = "Resim",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(988),
                            Description = "Resim Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(989),
                            Url = "resim"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "8a03a184-1824-4a87-a987-5cd817de817f"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "1822a0ca-0a7e-4da4-a026-a5a50a1b5305"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "de847b0a-2b0a-437f-ab4e-f5518b47fee3"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "05a6cf7c-d1ec-4e40-bd37-5bace524ad61"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "11f41da4-01a5-49bb-a297-915ddbc0d5e9"
                        },
                        new
                        {
                            Id = 6,
                            UserId = "a0b429a4-a53a-45a4-bfd7-2612852f42fe"
                        },
                        new
                        {
                            Id = 7,
                            UserId = "0cf978b8-770b-4f35-8549-52ab3e4d7900"
                        },
                        new
                        {
                            Id = 8,
                            UserId = "3310c3e0-ce2e-44bd-9a98-730ee7e12a8b"
                        },
                        new
                        {
                            Id = 9,
                            UserId = "f2d6854b-2750-4c58-a2fe-77465cfc0742"
                        },
                        new
                        {
                            Id = 10,
                            UserId = "1d9475a9-c2e3-4513-83f1-92fa5171f945"
                        },
                        new
                        {
                            Id = 11,
                            UserId = "a8c58153-e6d7-40eb-9eb5-b6421facc7ca"
                        },
                        new
                        {
                            Id = 12,
                            UserId = "a1ea0889-d095-4621-91da-94c311ce9098"
                        },
                        new
                        {
                            Id = 13,
                            UserId = "8f17cfed-a964-4bd5-89cd-60075c729df8"
                        },
                        new
                        {
                            Id = 14,
                            UserId = "a95f875e-e710-4634-a13e-90078cc08f72"
                        },
                        new
                        {
                            Id = 15,
                            UserId = "ac11d4e5-08bb-41fb-bf73-adfebc8430bf"
                        },
                        new
                        {
                            Id = 16,
                            UserId = "a894e4ef-5068-4a94-9062-dc150c6f802a"
                        },
                        new
                        {
                            Id = 17,
                            UserId = "fbd7257a-6e9e-4689-9803-a9c8b0111fb8"
                        },
                        new
                        {
                            Id = 18,
                            UserId = "73bfb08d-6f47-4016-adb4-a437dd8d09bc"
                        },
                        new
                        {
                            Id = 19,
                            UserId = "0601b97c-9713-4f14-9fb2-91b04c121a42"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a979822-46da-47c0-8201-2f42940437c3",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6009bdd4-c680-4b31-b711-1c23c8b1e2e2",
                            Description = "Öğretmenler",
                            Name = "Ogretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "9070f98f-7a4b-4736-9d01-4802ed61c9a4",
                            Description = "Öğrenciler",
                            Name = "Ogrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8a03a184-1824-4a87-a987-5cd817de817f",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "8a6a3b50-bc4e-462c-90bd-1f06bf0ec32a",
                            DateOfBirth = new DateTime(1998, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Ovalı",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET@HOTMAIL.COM",
                            NormalizedUserName = "AHMET",
                            PasswordHash = "AQAAAAIAAYagAAAAEMTXe8D6QYN8xWtthvaXyWXeDsYcAtFsLQcII7N8j+09kHLiQP/ngF0xJKxIt3m7kw==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d4c39a3-fc0f-40a9-8e49-120e6a6649d9",
                            TwoFactorEnabled = false,
                            UserName = "ahmet"
                        },
                        new
                        {
                            Id = "1822a0ca-0a7e-4da4-a026-a5a50a1b5305",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "f9af34b3-b41e-4d35-bff3-f99ebeec9a30",
                            DateOfBirth = new DateTime(2007, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "denizcakir@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Çakır",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZCAKIR@HOTMAIL.COM",
                            NormalizedUserName = "DENIZCAKIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEFc54u730jCZaLnqFVM4pxPaiaX4mArNgJFfKqxCpD1fW5wnCQMKzrMW//5E8Mvm8A==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "896db0b0-95b1-4428-8dcf-2dd3a1fed88c",
                            TwoFactorEnabled = false,
                            UserName = "denizcakir"
                        },
                        new
                        {
                            Id = "de847b0a-2b0a-437f-ab4e-f5518b47fee3",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "3ccf908e-1c91-4634-b7f0-ded91008273e",
                            DateOfBirth = new DateTime(2002, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetyilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETYILMAZ@GMAİL.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEKDop86FYXjt0CurMfQvlaTV6vfNuQhy0YRCYND+ENd0lRYR+FohIEDbuboljchwjw==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4abb244c-89cb-4fb1-9f88-f1fb30b4d257",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = "05a6cf7c-d1ec-4e40-bd37-5bace524ad61",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "d933a65e-1472-484f-8940-e2e5977ff83d",
                            DateOfBirth = new DateTime(2001, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.demir@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.DEMIR@YAHOO.COM",
                            NormalizedUserName = "AYSEDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEF812wBeRVcxiDf9+KRvo1gOdNwVNo63bUAe79/Es8wictdihDutvJomlZao+OR60A==",
                            Phone = "5329876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79fa3f04-4eed-4f93-b2b9-0e2ba8629dfd",
                            TwoFactorEnabled = false,
                            UserName = "aysedemir"
                        },
                        new
                        {
                            Id = "11f41da4-01a5-49bb-a297-915ddbc0d5e9",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "250dda10-a406-428d-9925-39c9ab884ca7",
                            DateOfBirth = new DateTime(2009, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmetkaya@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETKAYA@HOTMAIL.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEE71RS6AkpGaoz8xGnVtLprkDcnrt4s3Ip/9TQaez4ZH2xU08BG8yl2JcKVibA1wrg==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e781b5ff-2ca0-4a43-aadd-d16e8126a434",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "a0b429a4-a53a-45a4-bfd7-2612852f42fe",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "83f67d1e-60c4-4641-bc7f-eda18f111a4f",
                            DateOfBirth = new DateTime(2003, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatmasahin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMASAHIN@GMAIL.COM",
                            NormalizedUserName = "FATMASAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJN1vyVXZ+chPUHQmULv9S+oEcZZ9SGT8N0g8+3CoJw6JDO1WFDYXvQ+BGxt2SFVkw==",
                            Phone = "5334567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe863090-a749-46ad-9b44-668039db900c",
                            TwoFactorEnabled = false,
                            UserName = "fatmasahin"
                        },
                        new
                        {
                            Id = "0cf978b8-770b-4f35-8549-52ab3e4d7900",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "51c5da9f-3346-4276-ac2d-913a95aa05c9",
                            DateOfBirth = new DateTime(2008, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emreakin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Akın",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMREAKIN@HOTMAIL.COM",
                            NormalizedUserName = "EMREAKIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIDQlZERCfOI2kKfc1DLILW8Wg8PGtaersR6u4bAICtvZs5OMV08GaX1KDtyDXSBMw==",
                            Phone = "5379876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fca9fc73-2824-4d76-ae7b-47b37ba0dd5d",
                            TwoFactorEnabled = false,
                            UserName = "emreakin"
                        },
                        new
                        {
                            Id = "3310c3e0-ce2e-44bd-9a98-730ee7e12a8b",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "b5b66bc4-ce9d-48aa-9538-9adfea3b12b1",
                            DateOfBirth = new DateTime(2005, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynepturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Türk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEPTURK@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEK1caI5V8oMug3Qd463DwfimdLps6AcGe9HlKaZBTtB6gF0actmORn5T3MIRLHESCg==",
                            Phone = "5336549872",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34654ff2-ed4c-46dc-b937-7bd8fcf63f9b",
                            TwoFactorEnabled = false,
                            UserName = "zeynepturk"
                        },
                        new
                        {
                            Id = "f2d6854b-2750-4c58-a2fe-77465cfc0742",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "9dd7a906-2090-45a4-846a-9639119bfb3b",
                            DateOfBirth = new DateTime(2007, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBJFK3aScSjR4lvnpqU2ge/Bjd65mt+KlQ5cvASrcpFeyIzmCRLzw84WB8oVxGli4g==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2bb9570-ed34-4e9b-b0d6-a30628498641",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz"
                        },
                        new
                        {
                            Id = "1d9475a9-c2e3-4513-83f1-92fa5171f945",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "5aa15d77-a985-4e4d-a46f-55769182c1e6",
                            DateOfBirth = new DateTime(2009, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mustafaozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mustafa",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUSTAFAOZKAN@GMAIL.COM",
                            NormalizedUserName = "MUSTAFAOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEG+qf43cIqj4Av41k8nkFZ8+SIDstIjOD94JwzIUPQZcCjawrKzMnkfVWk02Tbz0MA==",
                            Phone = "5423456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48d52b83-7741-43dc-a0a9-ff631e58663a",
                            TwoFactorEnabled = false,
                            UserName = "mustafaozkan"
                        },
                        new
                        {
                            Id = "a8c58153-e6d7-40eb-9eb5-b6421facc7ca",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "b297ef16-5609-413a-b340-7d7392830d3a",
                            DateOfBirth = new DateTime(2008, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRAAYDIN@HOTMAIL.COM",
                            NormalizedUserName = "ESRAAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGToRJiI1uS+tZQFz53XdPHoIMSpFh4ebfrXzJb3xgzRLDwEOtI0scbSmMmHmV3TBw==",
                            Phone = "5397891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a33b55ac-9cac-4639-940f-305654365602",
                            TwoFactorEnabled = false,
                            UserName = "esraaydin"
                        },
                        new
                        {
                            Id = "a1ea0889-d095-4621-91da-94c311ce9098",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "11f3509e-ad59-41ee-8b16-0b69481753f0",
                            DateOfBirth = new DateTime(1980, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selinkar@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            ImageId = 1,
                            LastName = "Kar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELINKAR@HOTMAIL.COM",
                            NormalizedUserName = "SELINKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEGNdOAPuqOYg0K7CPWokpno/XW9xwbSE8W9mZDHoouVkVhrv6PdOg7cJEzB0V6CJBg==",
                            Phone = "5399782513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9e723b9-1ea6-4305-8fb2-df9f26d61fd9",
                            TwoFactorEnabled = false,
                            UserName = "selinkar"
                        },
                        new
                        {
                            Id = "8f17cfed-a964-4bd5-89cd-60075c729df8",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "f5df25e4-a96d-4353-8c5c-df3306cdc938",
                            DateOfBirth = new DateTime(1990, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cem.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cem",
                            Gender = "Erkek",
                            ImageId = 2,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEM.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "CEMYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEK9CGc7CT4CyOcRj4FFPYc4zk5xRqf/kd0xAdkmS/sBKuMUgXVScEKhqCa+PyrVNBQ==",
                            Phone = "5323456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74598949-b7a5-4d7c-a481-94da3993fc62",
                            TwoFactorEnabled = false,
                            UserName = "cemyilmaz"
                        },
                        new
                        {
                            Id = "a95f875e-e710-4634-a13e-90078cc08f72",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "18251610-47c4-420d-ad91-5cb7bc69a9d3",
                            DateOfBirth = new DateTime(1992, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şevval",
                            Gender = "Kadın",
                            ImageId = 3,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "sevval.demir@hotmail.com",
                            NormalizedUserName = "SEVVALDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEBN3fKUJHFIcAvClx1rptTrPwQMHO1uJ4W1Ku3pB+uJASbeEoD1pIQC8wWdBDaJD7A==",
                            Phone = "5387891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "154725e5-b2d7-4fff-9c55-41f2b35240da",
                            TwoFactorEnabled = false,
                            UserName = "sevvaldemir"
                        },
                        new
                        {
                            Id = "ac11d4e5-08bb-41fb-bf73-adfebc8430bf",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "c7285138-8d79-4ab5-aea0-98e68a1f8247",
                            DateOfBirth = new DateTime(1994, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 4,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBgPBZ0z31us2kSys4V5bS2RnJfz7eHcJgS9tnIRQfZW0ErYZYBb0wn7PIrei5fqGg==",
                            Phone = "5336549876",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "298811cc-020d-4def-8e3e-c5b9b7a8e5ec",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildiz"
                        },
                        new
                        {
                            Id = "a894e4ef-5068-4a94-9062-dc150c6f802a",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "32313549-fe8e-45b6-8df2-912e29d2c0ae",
                            DateOfBirth = new DateTime(1980, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gul.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gül",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUL.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "GULSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPK81u+r+hW4b7ws8ZoqdYaCbhNx5EWcaYH4K62m3kl8zQPrt/KbrUrYXxL5mTjTmw==",
                            Phone = "5361234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "748a219e-3695-4e87-9da8-c9de814d6457",
                            TwoFactorEnabled = false,
                            UserName = "gulsahin"
                        },
                        new
                        {
                            Id = "fbd7257a-6e9e-4689-9803-a9c8b0111fb8",
                            AccessFailedCount = 0,
                            City = "Kayseri",
                            ConcurrencyStamp = "6834d567-07ff-4c6e-9442-5b7f496268ae",
                            DateOfBirth = new DateTime(1987, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemal.kaya@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMAL.KAYA@GMAIL.COM",
                            NormalizedUserName = "KEMALKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJNy69upKSUB+sI66g3B3Jtul5C/A+xINElUReBcJjLtpFef8UiAsGSgIUpwtRMxjA==",
                            Phone = "5359876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c5e71bc-b27a-4ef4-ba5a-c7059ec56652",
                            TwoFactorEnabled = false,
                            UserName = "kemalkaya"
                        },
                        new
                        {
                            Id = "73bfb08d-6f47-4016-adb4-a437dd8d09bc",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "571aca10-e709-441b-b717-a601cb0b41bf",
                            DateOfBirth = new DateTime(1990, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gokhan.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gökhan",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GOKHANAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGAQYwfezbv7eT5H8/XxriR8V/GLk+ulTzRquM0GQjaJLhO05De6irnYj+tsXWAxQw==",
                            Phone = "5321234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b84a0020-a875-47f8-af0e-c1853c646314",
                            TwoFactorEnabled = false,
                            UserName = "gokhanaydin"
                        },
                        new
                        {
                            Id = "0601b97c-9713-4f14-9fb2-91b04c121a42",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "936de7b4-4ad5-4e1f-a03f-3ddc3b7056dc",
                            DateOfBirth = new DateTime(1992, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seyma.yilmaz@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şeyma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEYMA.YILMAZ@HOTMAIL.COM",
                            NormalizedUserName = "SEYMAYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBqMLJC+4LPTDu8UgD9XOlMTwjfxO277oROKcCUoljFUxXScrePSs/0lnmYhQBX9bw==",
                            Phone = "5399876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40368253-fd6d-47f1-8746-14c0f5b38368",
                            TwoFactorEnabled = false,
                            UserName = "seymayilmaz"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(6501),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(6502),
                            Url = "teacher-1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(6504),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(6505),
                            Url = "teacher-2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(6507),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(6507),
                            Url = "teacher-3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(6508),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(6509),
                            Url = "teacher-4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(6510),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 15, 648, DateTimeKind.Local).AddTicks(6511),
                            Url = "resimyok.jpg"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9232),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9250),
                            UserId = "1822a0ca-0a7e-4da4-a026-a5a50a1b5305"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9264),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9265),
                            UserId = "de847b0a-2b0a-437f-ab4e-f5518b47fee3"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9267),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9268),
                            UserId = "05a6cf7c-d1ec-4e40-bd37-5bace524ad61"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9270),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9271),
                            UserId = "11f41da4-01a5-49bb-a297-915ddbc0d5e9"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9275),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9276),
                            UserId = "a0b429a4-a53a-45a4-bfd7-2612852f42fe"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9278),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9279),
                            UserId = "0cf978b8-770b-4f35-8549-52ab3e4d7900"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9281),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9282),
                            UserId = "3310c3e0-ce2e-44bd-9a98-730ee7e12a8b"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9284),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9284),
                            UserId = "f2d6854b-2750-4c58-a2fe-77465cfc0742"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9286),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9287),
                            UserId = "1d9475a9-c2e3-4513-83f1-92fa5171f945"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9289),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9290),
                            UserId = "a8c58153-e6d7-40eb-9eb5-b6421facc7ca"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9347),
                            Graduation = "Çanakkale Onsekiz Mart Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9348),
                            UserId = "a1ea0889-d095-4621-91da-94c311ce9098"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9361),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9362),
                            UserId = "8f17cfed-a964-4bd5-89cd-60075c729df8"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9364),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9365),
                            UserId = "a95f875e-e710-4634-a13e-90078cc08f72"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9368),
                            Graduation = "Ege Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9369),
                            UserId = "ac11d4e5-08bb-41fb-bf73-adfebc8430bf"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9371),
                            Graduation = "Akdeniz Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9371),
                            UserId = "a894e4ef-5068-4a94-9062-dc150c6f802a"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9374),
                            Graduation = "Erciyes Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9375),
                            UserId = "fbd7257a-6e9e-4689-9803-a9c8b0111fb8"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9376),
                            Graduation = "Çukurova Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9377),
                            UserId = "73bfb08d-6f47-4016-adb4-a437dd8d09bc"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9380),
                            Graduation = "Uludağ Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 0, 13, 861, DateTimeKind.Local).AddTicks(9380),
                            UserId = "0601b97c-9713-4f14-9fb2-91b04c121a42"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 5,
                            BranchId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            BranchId = 6
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 9
                        },
                        new
                        {
                            TeacherId = 8,
                            BranchId = 10
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Advert", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("Adverts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Adverts")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Order")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Order", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Order");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}

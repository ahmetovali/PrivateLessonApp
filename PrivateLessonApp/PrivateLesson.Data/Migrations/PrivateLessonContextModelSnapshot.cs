// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrivateLesson.Data.Concrete.EfCore.Context;

#nullable disable

namespace PrivateLesson.Data.Migrations
{
    [DbContext(typeof(PrivateLessonContext))]
    partial class PrivateLessonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ca2d1d35-8476-4b7a-af6e-5d1ef00f32c3",
                            RoleId = "1ead16a5-50f9-4079-910b-80ac95027684"
                        },
                        new
                        {
                            UserId = "d26ac1ff-0492-4827-8d9b-a92f106242f9",
                            RoleId = "df13404b-0425-4670-ac16-f721b892caac"
                        },
                        new
                        {
                            UserId = "7177dd61-6c1c-42eb-bcc3-00c5494ecc57",
                            RoleId = "df13404b-0425-4670-ac16-f721b892caac"
                        },
                        new
                        {
                            UserId = "1c0f707f-b080-4835-aacb-b749e1d2d4ea",
                            RoleId = "df13404b-0425-4670-ac16-f721b892caac"
                        },
                        new
                        {
                            UserId = "abef7276-b604-4c3c-adb1-2a878d3140be",
                            RoleId = "df13404b-0425-4670-ac16-f721b892caac"
                        },
                        new
                        {
                            UserId = "76363925-9072-4736-915f-ece26aa0dc30",
                            RoleId = "df13404b-0425-4670-ac16-f721b892caac"
                        },
                        new
                        {
                            UserId = "e2c50181-52b5-4b46-8edf-99199c684e08",
                            RoleId = "df13404b-0425-4670-ac16-f721b892caac"
                        },
                        new
                        {
                            UserId = "72917505-bb15-47fe-b10d-8a4743c66195",
                            RoleId = "df13404b-0425-4670-ac16-f721b892caac"
                        },
                        new
                        {
                            UserId = "bed72338-361e-4709-a197-e1f6c2c40a77",
                            RoleId = "df13404b-0425-4670-ac16-f721b892caac"
                        },
                        new
                        {
                            UserId = "0ca225bc-497f-492d-98d1-99e5645fe291",
                            RoleId = "df13404b-0425-4670-ac16-f721b892caac"
                        },
                        new
                        {
                            UserId = "237a9294-669f-495f-8aea-c95430561a0b",
                            RoleId = "df13404b-0425-4670-ac16-f721b892caac"
                        },
                        new
                        {
                            UserId = "45f36c5a-f362-4769-9567-741154e98f84",
                            RoleId = "9fbddff8-c9c8-4650-b17c-56afaba90b21"
                        },
                        new
                        {
                            UserId = "79f96167-7589-4d4f-b02d-c4d4105b0230",
                            RoleId = "9fbddff8-c9c8-4650-b17c-56afaba90b21"
                        },
                        new
                        {
                            UserId = "656c9e9f-9fb3-4258-973d-7fda59bd19db",
                            RoleId = "9fbddff8-c9c8-4650-b17c-56afaba90b21"
                        },
                        new
                        {
                            UserId = "46bbfa6e-bf2c-4c75-abab-a2ce4fe462c8",
                            RoleId = "9fbddff8-c9c8-4650-b17c-56afaba90b21"
                        },
                        new
                        {
                            UserId = "674ab086-45b0-48cb-8149-cf6c465eab89",
                            RoleId = "9fbddff8-c9c8-4650-b17c-56afaba90b21"
                        },
                        new
                        {
                            UserId = "4f5e1da5-c3c2-4e96-b771-95cc538fdb71",
                            RoleId = "9fbddff8-c9c8-4650-b17c-56afaba90b21"
                        },
                        new
                        {
                            UserId = "e9d470c0-b5e3-461b-bd93-5d4ec41af35a",
                            RoleId = "9fbddff8-c9c8-4650-b17c-56afaba90b21"
                        },
                        new
                        {
                            UserId = "e7757cac-ae31-482d-be3d-244e6e7dc4c2",
                            RoleId = "9fbddff8-c9c8-4650-b17c-56afaba90b21"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matamatik",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9476),
                            Description = "Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9483),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Fizik",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9488),
                            Description = "Fizik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9489),
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9491),
                            Description = "Kimya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9491),
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Biyoloji",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9493),
                            Description = "Biyoloji Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9493),
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Tarih",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9495),
                            Description = "Tarih Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9496),
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Coğrafya",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9497),
                            Description = "Coğrafya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9498),
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9499),
                            Description = "İngilizce Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9500),
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Almanca",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9502),
                            Description = "Almanca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9502),
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Fransızca",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9504),
                            Description = "Fransızca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9504),
                            Url = "fransizca"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Felsefe",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9506),
                            Description = "Felsefe Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9506),
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 11,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9508),
                            Description = "Müzik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9509),
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 12,
                            BranchName = "Resim",
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9510),
                            Description = "Resim Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 290, DateTimeKind.Local).AddTicks(9511),
                            Url = "resim"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1ead16a5-50f9-4079-910b-80ac95027684",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9fbddff8-c9c8-4650-b17c-56afaba90b21",
                            Description = "Öğretmenler",
                            Name = "Öğretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "df13404b-0425-4670-ac16-f721b892caac",
                            Description = "Öğrenciler",
                            Name = "Öğrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ca2d1d35-8476-4b7a-af6e-5d1ef00f32c3",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "29e4f9cc-59db-4494-bbac-b287d3c14876",
                            DateOfBirth = new DateTime(1998, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetovali1903@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            LastName = "Ovalı",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETOVALI1903@GMAIL.COM",
                            NormalizedUserName = "AHMETOVALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ7s2dPGAyEaUniegxszKTjED/qRN19ww9+8jaKlJn3Ogd5A6nvTSP2R9RMmQxiefw==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e78d64b-4834-4310-97f0-74e5290c1493",
                            TwoFactorEnabled = false,
                            UserName = "ahmetovali"
                        },
                        new
                        {
                            Id = "d26ac1ff-0492-4827-8d9b-a92f106242f9",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "023d365f-0b33-430d-9719-01a949c094e4",
                            DateOfBirth = new DateTime(1988, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAENo7MP7yCVPiNmmHM0Hx6dcU55L6x/oLIXLR20r9aU+0vcK+pJ2i4ILo5FRvqNjIdw==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee8088c2-08f6-4404-8b77-e06b57c5c42b",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = "7177dd61-6c1c-42eb-bcc3-00c5494ecc57",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "ae801043-dc90-491e-8f32-934926333776",
                            DateOfBirth = new DateTime(1995, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selin.ozcan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            LastName = "Özcan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELIN.OZCAN@EXAMPLE.COM",
                            NormalizedUserName = "SELINOZCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBheConIIEhFeRl0zxYuTHvZmeN/81bS3e9O/CswuipJB0MU45dpPLQbwq4+au2Csw==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ed98af1-e50c-4924-a918-bc58aa94e7bc",
                            TwoFactorEnabled = false,
                            UserName = "selinozcan"
                        },
                        new
                        {
                            Id = "1c0f707f-b080-4835-aacb-b749e1d2d4ea",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "4883e705-0ac6-4340-9579-abd9953b8f9e",
                            DateOfBirth = new DateTime(1990, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.kaya@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.KAYA@EXAMPLE.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEP9gDMMmeUAidfTQ0iIyyLyBBPMJXjkLO4XAflRFwyftZ5cshwB9wWDUy1G6qePUEA==",
                            Phone = "5551112233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "437d9fad-7ef6-4041-b078-fe87d92fb933",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "abef7276-b604-4c3c-adb1-2a878d3140be",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "80fd9191-54d5-4307-bd45-2ad79c550d15",
                            DateOfBirth = new DateTime(1998, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seda.dogan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Seda",
                            Gender = "Kadın",
                            LastName = "Doğan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEDA.DOGAN@EXAMPLE.COM",
                            NormalizedUserName = "SEDADOGAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGtJzIp4E+VIkvNcyT9WMQYjxJUPETSrVIOsib3nZ3oeGDziObymyjc9hVDcOmaRQA==",
                            Phone = "5554445566",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2b983ff-d817-462f-a371-6f31d6ca2ef6",
                            TwoFactorEnabled = false,
                            UserName = "sedadogan"
                        },
                        new
                        {
                            Id = "76363925-9072-4736-915f-ece26aa0dc30",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "ce0d4173-3aca-429c-931a-3a4a2d1bbfbc",
                            DateOfBirth = new DateTime(1985, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "murat.gunes@example.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = "Erkek",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURAT.GUNES@EXAMPLE.COM",
                            NormalizedUserName = "MURATGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7sxKgCC9ZsIJxfMOSpS3s1RDpne5NpLpVlrigayXvPANrH71O7DgEzEBYDY/LsFA==",
                            Phone = "5558889999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b51b572-5280-4e62-bd97-e5f6d6b39077",
                            TwoFactorEnabled = false,
                            UserName = "muratgunes"
                        },
                        new
                        {
                            Id = "e2c50181-52b5-4b46-8edf-99199c684e08",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "c71d1124-cee7-47bc-821b-c25a7283f798",
                            DateOfBirth = new DateTime(1991, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "AYSEYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgQvJm0koZkj6fAwXKXQGzqwFnuAG7gPRiMbiIcLQjuKk3zLr07qmy1zOOcA7C+ow==",
                            Phone = "5553334444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acd32beb-66ba-401f-aa02-c3cf5056c817",
                            TwoFactorEnabled = false,
                            UserName = "ayseyildiz"
                        },
                        new
                        {
                            Id = "72917505-bb15-47fe-b10d-8a4743c66195",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "6e70fd00-b7ee-48b3-95d9-a7c61fbe4d26",
                            DateOfBirth = new DateTime(1980, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ercan.ozturk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ercan",
                            Gender = "Erkek",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERCAN.OZTURK@EXAMPLE.COM",
                            NormalizedUserName = "ERCANOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEHenCsix0WzNaLNN/UUm/weSPxEeMaKIR18w4RhE+gXfyH5VPbqJXNWoFGDVGpRq/w==",
                            Phone = "5552223344",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f6bc759-d1e0-4a2e-9e2b-7be271a3150a",
                            TwoFactorEnabled = false,
                            UserName = "ercanozturk"
                        },
                        new
                        {
                            Id = "bed72338-361e-4709-a197-e1f6c2c40a77",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "7676c58e-aece-4d01-8584-5ab7522e892a",
                            DateOfBirth = new DateTime(1996, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.guler@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Güler",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.GULER@EXAMPLE.COM",
                            NormalizedUserName = "ALIGULER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOsAecBicv+l67ACzLXPqi8b8fVDPny2wElExNb0lYrE3nKEfYuiblSxjrVeVoL9eQ==",
                            Phone = "5557778899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e12185d-a642-4762-98d7-e349134cae95",
                            TwoFactorEnabled = false,
                            UserName = "aliguler"
                        },
                        new
                        {
                            Id = "0ca225bc-497f-492d-98d1-99e5645fe291",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "2f0cf0eb-31c4-46f3-8125-19120a425b40",
                            DateOfBirth = new DateTime(1992, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hatice.aydin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Hatice",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "HATICE.AYDIN@EXAMPLE.COM",
                            NormalizedUserName = "HATICEAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHAiD/xB0CH2IPADAyi6k38H1xv5xoHWLhXgdo3m8AMfO/YNQ6jlQ8Z113Udrs9fNA==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d1e9893-7126-4f98-85b4-49925fd4a43e",
                            TwoFactorEnabled = false,
                            UserName = "haticeaydin"
                        },
                        new
                        {
                            Id = "237a9294-669f-495f-8aea-c95430561a0b",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "64dc343d-b4b0-4792-8512-c8b48cf89e09",
                            DateOfBirth = new DateTime(1987, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mert.kilic@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mert",
                            Gender = "Erkek",
                            LastName = "Kılıç",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT.KILIC@EXAMPLE.COM",
                            NormalizedUserName = "MERTKILIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEMasu2TiC+voHMvWp7V+E9zwPVP+svUthtjHrNQoGRORN4rS/psu0XuSB+hJjHBH+g==",
                            Phone = "5551112233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a9c652a-3d44-41b3-bf39-ab3689f0ebba",
                            TwoFactorEnabled = false,
                            UserName = "mertkilic"
                        },
                        new
                        {
                            Id = "45f36c5a-f362-4769-9567-741154e98f84",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "8d02902c-6fea-45ed-aa2a-d7f2db7ed73b",
                            DateOfBirth = new DateTime(1994, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asli.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Aslı",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASLI.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "ASLIYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBdyYBAzzTFuEaWuMRNJPNkz2lwQECeAZKTY0HLGF4HnzA0vH8JNuaEVRBtBKeKIeA==",
                            Phone = "5555556677",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abd0cc38-2d36-42a0-98fc-a09af7ef2065",
                            TwoFactorEnabled = false,
                            UserName = "asliyilmaz"
                        },
                        new
                        {
                            Id = "79f96167-7589-4d4f-b02d-c4d4105b0230",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "14f30ddf-c4d1-435a-a1ed-a681faf96180",
                            DateOfBirth = new DateTime(1991, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emre.yildir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            LastName = "Yıldır",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE.YILDIR@EXAMPLE.COM",
                            NormalizedUserName = "EMREYILDIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEJeSM8QE0DjtSCPo06HveT1HDQfgNZ/gt9nId81sG5VdaZ1w0SKZMBS7ToG2RRbBoQ==",
                            Phone = "5558887744",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ac3ed45-e519-42ce-ac55-331e2a69dbc1",
                            TwoFactorEnabled = false,
                            UserName = "emreyildir"
                        },
                        new
                        {
                            Id = "656c9e9f-9fb3-4258-973d-7fda59bd19db",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "48c6e2bb-fb07-4ae7-a8ff-ae2ea7837941",
                            DateOfBirth = new DateTime(1985, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ebru.ozturk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ebru",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "EBRU.OZTURK@EXAMPLE.COM",
                            NormalizedUserName = "EBRUOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEGYqUN1siZPryoo03eqyPMufG07u7WQpKvF/EgssmVQMwBngirvP4lavNX/k99241g==",
                            Phone = "5552221133",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26bc18ad-64cd-4cce-9036-0a74c62199cc",
                            TwoFactorEnabled = false,
                            UserName = "ebruozturk"
                        },
                        new
                        {
                            Id = "46bbfa6e-bf2c-4c75-abab-a2ce4fe462c8",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "fa366d4e-98a3-48a2-bfed-5e5225115aaf",
                            DateOfBirth = new DateTime(1999, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "umut.celik@example.com",
                            EmailConfirmed = true,
                            FirstName = "Umut",
                            Gender = "Erkek",
                            LastName = "Çelik",
                            LockoutEnabled = false,
                            NormalizedEmail = "UMUT.CELIK@EXAMPLE.COM",
                            NormalizedUserName = "UMUTCELIK",
                            PasswordHash = "AQAAAAIAAYagAAAAELCKk4q+ToJb5lw4PwW7r7z/sBSO+wim0O+Up4B9OA2noesOpAgpBDOP/qn3+N4Dtw==",
                            Phone = "5552223344",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32988afc-4073-4def-a0d0-b5a0c38813fc",
                            TwoFactorEnabled = false,
                            UserName = "umutcelik"
                        },
                        new
                        {
                            Id = "674ab086-45b0-48cb-8149-cf6c465eab89",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "c11c3264-eb65-4897-a920-95af4bd249e5",
                            DateOfBirth = new DateTime(1988, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aylin.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Aylin",
                            Gender = "Kadın",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYLIN.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "AYLINDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOwKbzl4C1O1zVVEMDIn0SAPNzXuOPu4f6ue4hKdvyhtSiEh/Eppa1Msg2Zngqo2yg==",
                            Phone = "5557779900",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2cb3e2f-af4d-4bca-850c-f5f5253293f6",
                            TwoFactorEnabled = false,
                            UserName = "aylindemir"
                        },
                        new
                        {
                            Id = "4f5e1da5-c3c2-4e96-b771-95cc538fdb71",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "404c1e50-65f2-4cbc-99c4-d566c66921af",
                            DateOfBirth = new DateTime(1997, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "murat.can@example.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = "Erkek",
                            LastName = "Can",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURAT.CAN@EXAMPLE.COM",
                            NormalizedUserName = "MURATCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEE6lsnGuk+sdJWbRPg/p5GgYYD63oNXuYlAKaKr5pWe0yVafCwoJkeB2Q0iERx21PA==",
                            Phone = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc3b80c2-e3ac-44f0-8629-bac543192358",
                            TwoFactorEnabled = false,
                            UserName = "muratcan"
                        },
                        new
                        {
                            Id = "e9d470c0-b5e3-461b-bd93-5d4ec41af35a",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "46e31c1d-24d2-41c0-b90d-2009d65250a9",
                            DateOfBirth = new DateTime(1994, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elif.akyildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            Gender = "Kadın",
                            LastName = "Akyıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF.AKYILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "ELIFAKYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEDAt9gcBDGPOdkE37pkasJDkye3IgxdQpee5VoU0ghRFlcVG+cvllznkFyduTNz2XQ==",
                            Phone = "5558887766",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad297081-c10b-4fa5-b7b1-0e4dc904c172",
                            TwoFactorEnabled = false,
                            UserName = "elifakyildiz"
                        },
                        new
                        {
                            Id = "e7757cac-ae31-482d-be3d-244e6e7dc4c2",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "c6ebcc0a-b031-44f7-8177-2823cab530e7",
                            DateOfBirth = new DateTime(1992, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "goksu.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Göksu",
                            Gender = "Kadın",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKSU.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "GOKSUDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEAChrXfxUsj3r/xHqROBVVLTtFdw6yPUOGYnlKJ2JlhumGHzekDOhTvJASVm9XtkVA==",
                            Phone = "5554443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "782edccc-5f0d-4867-be4a-8f689709646b",
                            TwoFactorEnabled = false,
                            UserName = "goksudemir"
                        },
                        new
                        {
                            Id = "7817ee1b-6eb4-4449-ac44-c57f6c311edb",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "984717f7-9a69-4436-90b7-3c821ea82037",
                            DateOfBirth = new DateTime(1985, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emre.yildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE.YILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "EMREYILDIZ",
                            Phone = "5301234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51edab4c-0480-413e-87fb-7877d47e8510",
                            TwoFactorEnabled = false,
                            UserName = "emreyildiz"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 291, DateTimeKind.Local).AddTicks(2076),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 291, DateTimeKind.Local).AddTicks(2078),
                            Url = "1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 291, DateTimeKind.Local).AddTicks(2080),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 291, DateTimeKind.Local).AddTicks(2081),
                            Url = "2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 291, DateTimeKind.Local).AddTicks(2082),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 291, DateTimeKind.Local).AddTicks(2083),
                            Url = "3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 291, DateTimeKind.Local).AddTicks(2084),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 291, DateTimeKind.Local).AddTicks(2085),
                            Url = "4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 291, DateTimeKind.Local).AddTicks(2086),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 38, 291, DateTimeKind.Local).AddTicks(2087),
                            Url = "5.jpg"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9725),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9747),
                            UserId = "d26ac1ff-0492-4827-8d9b-a92f106242f9"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9769),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9770),
                            UserId = "7177dd61-6c1c-42eb-bcc3-00c5494ecc57"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9775),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9776),
                            UserId = "1c0f707f-b080-4835-aacb-b749e1d2d4ea"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9781),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9782),
                            UserId = "abef7276-b604-4c3c-adb1-2a878d3140be"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9786),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9787),
                            UserId = "76363925-9072-4736-915f-ece26aa0dc30"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9792),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9794),
                            UserId = "e2c50181-52b5-4b46-8edf-99199c684e08"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9797),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9799),
                            UserId = "72917505-bb15-47fe-b10d-8a4743c66195"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9803),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9804),
                            UserId = "bed72338-361e-4709-a197-e1f6c2c40a77"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9807),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9809),
                            UserId = "0ca225bc-497f-492d-98d1-99e5645fe291"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9814),
                            ImageId = 5,
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9816),
                            UserId = "237a9294-669f-495f-8aea-c95430561a0b"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9977),
                            Graduation = "Kırıkkale Üniversitesi",
                            ImageId = 1,
                            IsApproved = true,
                            Price = 300m,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 63, DateTimeKind.Local).AddTicks(9979),
                            UserId = "45f36c5a-f362-4769-9567-741154e98f84"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(7),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            ImageId = 2,
                            IsApproved = true,
                            Price = 400m,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(9),
                            UserId = "79f96167-7589-4d4f-b02d-c4d4105b0230"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(15),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            ImageId = 3,
                            IsApproved = true,
                            Price = 350m,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(16),
                            UserId = "656c9e9f-9fb3-4258-973d-7fda59bd19db"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(21),
                            Graduation = "Yıldız Teknik Üniversitesi",
                            ImageId = 4,
                            IsApproved = true,
                            Price = 380m,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(23),
                            UserId = "46bbfa6e-bf2c-4c75-abab-a2ce4fe462c8"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(29),
                            Graduation = "Akdeniz Üniversitesi",
                            ImageId = 5,
                            IsApproved = true,
                            Price = 320m,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(30),
                            UserId = "674ab086-45b0-48cb-8149-cf6c465eab89"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(37),
                            Graduation = "Erciyes Üniversitesi",
                            ImageId = 5,
                            IsApproved = true,
                            Price = 400m,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(39),
                            UserId = "4f5e1da5-c3c2-4e96-b771-95cc538fdb71"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(44),
                            Graduation = "Çukurova Üniversitesi",
                            ImageId = 5,
                            IsApproved = true,
                            Price = 420m,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(45),
                            UserId = "e9d470c0-b5e3-461b-bd93-5d4ec41af35a"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(50),
                            Graduation = "Uludağ Üniversitesi",
                            ImageId = 5,
                            IsApproved = true,
                            Price = 380m,
                            UpdatedDate = new DateTime(2023, 4, 18, 15, 2, 36, 64, DateTimeKind.Local).AddTicks(51),
                            UserId = "e7757cac-ae31-482d-be3d-244e6e7dc4c2"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 5,
                            BranchId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            BranchId = 6
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 9
                        },
                        new
                        {
                            TeacherId = 8,
                            BranchId = 10
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}

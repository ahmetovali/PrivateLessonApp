// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrivateLesson.Data.Concrete.EfCore.Context;

#nullable disable

namespace PrivateLesson.Data.Migrations
{
    [DbContext(typeof(PrivateLessonContext))]
    partial class PrivateLessonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2ea19015-5e2d-4541-9985-8463d8fe8a2d",
                            RoleId = "72503ac6-1097-4bda-b3e8-5f5dd8d4b4fd"
                        },
                        new
                        {
                            UserId = "d4f37be3-e849-49cd-bee4-bf8c593c6c87",
                            RoleId = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73"
                        },
                        new
                        {
                            UserId = "5e47b7b7-a7d0-49e5-a67d-b6c71dc5b759",
                            RoleId = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73"
                        },
                        new
                        {
                            UserId = "deba7d51-3260-4a71-aaf8-4efb25370b3a",
                            RoleId = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73"
                        },
                        new
                        {
                            UserId = "22f680eb-f0c1-4c4b-99d9-aa2771e9f76a",
                            RoleId = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73"
                        },
                        new
                        {
                            UserId = "9a1fe876-fe8f-400d-8b88-f9fb0714e7c9",
                            RoleId = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73"
                        },
                        new
                        {
                            UserId = "a3037e92-4888-4096-bf7e-5d8fa5c66654",
                            RoleId = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73"
                        },
                        new
                        {
                            UserId = "b2eecaa5-d098-455e-980d-0c6938587727",
                            RoleId = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73"
                        },
                        new
                        {
                            UserId = "c7412237-1a15-402e-81fc-2040e4a240bf",
                            RoleId = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73"
                        },
                        new
                        {
                            UserId = "b0cb2d32-fc07-435c-8e54-4f81c14d4798",
                            RoleId = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73"
                        },
                        new
                        {
                            UserId = "1ca7dc61-1264-4dce-8b71-b89e091804b7",
                            RoleId = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73"
                        },
                        new
                        {
                            UserId = "9491c173-a816-4f7f-9a37-a30db67f57c6",
                            RoleId = "15549beb-4106-499c-9685-603ced3864a3"
                        },
                        new
                        {
                            UserId = "08a999de-5e39-4091-b0a2-e26271a9244e",
                            RoleId = "15549beb-4106-499c-9685-603ced3864a3"
                        },
                        new
                        {
                            UserId = "1ff5e5cc-a719-4ed5-9df9-0a491c4d84b2",
                            RoleId = "15549beb-4106-499c-9685-603ced3864a3"
                        },
                        new
                        {
                            UserId = "26fa0135-c82a-42de-aee3-11f7bab35747",
                            RoleId = "15549beb-4106-499c-9685-603ced3864a3"
                        },
                        new
                        {
                            UserId = "be3cdd2d-24fb-41ba-80ee-0373f75fbb70",
                            RoleId = "15549beb-4106-499c-9685-603ced3864a3"
                        },
                        new
                        {
                            UserId = "54b948e9-3958-4d1a-aecc-f03ce0395955",
                            RoleId = "15549beb-4106-499c-9685-603ced3864a3"
                        },
                        new
                        {
                            UserId = "108d135b-32e6-4aab-b67e-6287821be53a",
                            RoleId = "15549beb-4106-499c-9685-603ced3864a3"
                        },
                        new
                        {
                            UserId = "2d1798d1-8e6a-4805-a032-13e66c107bd7",
                            RoleId = "15549beb-4106-499c-9685-603ced3864a3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2633),
                            Description = "Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2638),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Fizik",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2644),
                            Description = "Fizik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2646),
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2649),
                            Description = "Kimya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2649),
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Biyoloji",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2652),
                            Description = "Biyoloji Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2653),
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Tarih",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2655),
                            Description = "Tarih Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2656),
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Coğrafya",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2659),
                            Description = "Coğrafya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2660),
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2662),
                            Description = "İngilizce Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2664),
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Almanca",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2666),
                            Description = "Almanca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2667),
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Fransızca",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2669),
                            Description = "Fransızca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2670),
                            Url = "fransizca"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Felsefe",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2673),
                            Description = "Felsefe Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2674),
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 11,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2676),
                            Description = "Müzik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2677),
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 12,
                            BranchName = "Resim",
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2679),
                            Description = "Resim Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 754, DateTimeKind.Local).AddTicks(2680),
                            Url = "resim"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "2ea19015-5e2d-4541-9985-8463d8fe8a2d"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "d4f37be3-e849-49cd-bee4-bf8c593c6c87"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "5e47b7b7-a7d0-49e5-a67d-b6c71dc5b759"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "deba7d51-3260-4a71-aaf8-4efb25370b3a"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "22f680eb-f0c1-4c4b-99d9-aa2771e9f76a"
                        },
                        new
                        {
                            Id = 6,
                            UserId = "9a1fe876-fe8f-400d-8b88-f9fb0714e7c9"
                        },
                        new
                        {
                            Id = 7,
                            UserId = "a3037e92-4888-4096-bf7e-5d8fa5c66654"
                        },
                        new
                        {
                            Id = 8,
                            UserId = "b2eecaa5-d098-455e-980d-0c6938587727"
                        },
                        new
                        {
                            Id = 9,
                            UserId = "c7412237-1a15-402e-81fc-2040e4a240bf"
                        },
                        new
                        {
                            Id = 10,
                            UserId = "b0cb2d32-fc07-435c-8e54-4f81c14d4798"
                        },
                        new
                        {
                            Id = 11,
                            UserId = "1ca7dc61-1264-4dce-8b71-b89e091804b7"
                        },
                        new
                        {
                            Id = 12,
                            UserId = "9491c173-a816-4f7f-9a37-a30db67f57c6"
                        },
                        new
                        {
                            Id = 13,
                            UserId = "08a999de-5e39-4091-b0a2-e26271a9244e"
                        },
                        new
                        {
                            Id = 14,
                            UserId = "1ff5e5cc-a719-4ed5-9df9-0a491c4d84b2"
                        },
                        new
                        {
                            Id = 15,
                            UserId = "26fa0135-c82a-42de-aee3-11f7bab35747"
                        },
                        new
                        {
                            Id = 16,
                            UserId = "be3cdd2d-24fb-41ba-80ee-0373f75fbb70"
                        },
                        new
                        {
                            Id = 17,
                            UserId = "54b948e9-3958-4d1a-aecc-f03ce0395955"
                        },
                        new
                        {
                            Id = 18,
                            UserId = "108d135b-32e6-4aab-b67e-6287821be53a"
                        },
                        new
                        {
                            Id = 19,
                            UserId = "2d1798d1-8e6a-4805-a032-13e66c107bd7"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("TeacherId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "72503ac6-1097-4bda-b3e8-5f5dd8d4b4fd",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "15549beb-4106-499c-9685-603ced3864a3",
                            Description = "Öğretmenler",
                            Name = "Ogretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "1c3d9b4b-a18d-4fc9-957a-4cc983160b73",
                            Description = "Öğrenciler",
                            Name = "Ogrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2ea19015-5e2d-4541-9985-8463d8fe8a2d",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "188f5124-68b5-48f5-bb4b-578ab74fb296",
                            DateOfBirth = new DateTime(1998, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Ovalı",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET@HOTMAIL.COM",
                            NormalizedUserName = "AHMET",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4XP8FCZxY7WymCDvuVfWBPj25OGoXvXs+5pXIeXHOHCngb2l4UKEwRYhSP0ldFCw==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5441303b-6630-4427-810a-3a3a1ae11dd7",
                            TwoFactorEnabled = false,
                            UserName = "ahmet"
                        },
                        new
                        {
                            Id = "d4f37be3-e849-49cd-bee4-bf8c593c6c87",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "fb880fca-f9fd-4785-a456-3345f4ea6542",
                            DateOfBirth = new DateTime(2007, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "denizcakir@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Çakır",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZCAKIR@HOTMAIL.COM",
                            NormalizedUserName = "DENIZCAKIR",
                            PasswordHash = "AQAAAAIAAYagAAAAECQRhdZ3B7GtxbtsDwXhsuU2Vm2kQU/Qi4uApMPPUMTKkXCqaGq2FVayWnhUNqYinw==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a37c8ee6-1f32-419d-8680-adc370ffea48",
                            TwoFactorEnabled = false,
                            UserName = "denizcakir"
                        },
                        new
                        {
                            Id = "5e47b7b7-a7d0-49e5-a67d-b6c71dc5b759",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "4a7122b3-66fb-40df-a246-75b5d99c83a8",
                            DateOfBirth = new DateTime(2002, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetyilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETYILMAZ@GMAİL.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEIINgr+TzUUh9azKoFGVYYsoNO4XFuenZ+iYzIECPJ8A/ISc2CwuYad0scE1swMWMw==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a92a277-1308-4ea5-aaa5-02a615612812",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = "deba7d51-3260-4a71-aaf8-4efb25370b3a",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "6fb14880-b0b9-4bab-955d-82a1bd725b12",
                            DateOfBirth = new DateTime(2001, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.demir@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.DEMIR@YAHOO.COM",
                            NormalizedUserName = "AYSEDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAENS7yHPQscbkLI1FTCjzA8rMo3ganJbRHUpHbtnAfpYBZh1048TAxiW78fUi1ksYzA==",
                            Phone = "5329876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "129b961e-08fa-47a4-ab9f-5afe6799ae6e",
                            TwoFactorEnabled = false,
                            UserName = "aysedemir"
                        },
                        new
                        {
                            Id = "22f680eb-f0c1-4c4b-99d9-aa2771e9f76a",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "54b9c1c7-8f09-44dd-829f-c0ac64febe2a",
                            DateOfBirth = new DateTime(2009, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmetkaya@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETKAYA@HOTMAIL.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDNQ+c1ujpkpn4vI1hKTTPy3zkmyp1riZaGXOc4FWcd/R2EQgGAlrIrtEzH5TsKXHg==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77cdc223-45bc-4361-8db7-c532583346fe",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "9a1fe876-fe8f-400d-8b88-f9fb0714e7c9",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "65dcaab7-b8be-4e66-8de5-3080526b159b",
                            DateOfBirth = new DateTime(2003, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatmasahin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMASAHIN@GMAIL.COM",
                            NormalizedUserName = "FATMASAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ/Rq8SMmlu4H48DYu9a/FJxCq3FEB85mNcCyzJzoc0xEo2R85XqGSo5VVHlXutl+w==",
                            Phone = "5334567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6eacedde-bc46-4927-a144-b50d53f1c2b6",
                            TwoFactorEnabled = false,
                            UserName = "fatmasahin"
                        },
                        new
                        {
                            Id = "a3037e92-4888-4096-bf7e-5d8fa5c66654",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "5387fc02-c1b7-4bcf-9e2d-40fec12056e0",
                            DateOfBirth = new DateTime(2008, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emreakin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Akın",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMREAKIN@HOTMAIL.COM",
                            NormalizedUserName = "EMREAKIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELrmvknV9FlL7sd8fPqOPfEVJ2We6LodAazNASTF6xtJYED/E3OcCFTN3dEOr6BwQg==",
                            Phone = "5379876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce409f11-138a-4c4e-9422-ae250a36d5bb",
                            TwoFactorEnabled = false,
                            UserName = "emreakin"
                        },
                        new
                        {
                            Id = "b2eecaa5-d098-455e-980d-0c6938587727",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "f0848617-7ae9-4d38-9df1-b65fcf47e6e8",
                            DateOfBirth = new DateTime(2005, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynepturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Türk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEPTURK@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEGgTa1BayM0Q2qrsj/rgtVuXEij87EDUTWQPeUWqBAzeB7qgmaolyAYgAHP8UjW+Sg==",
                            Phone = "5336549872",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08530b7b-749e-49b0-ab0e-ba19c03389b1",
                            TwoFactorEnabled = false,
                            UserName = "zeynepturk"
                        },
                        new
                        {
                            Id = "c7412237-1a15-402e-81fc-2040e4a240bf",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "13aa5f20-026c-452f-9afa-08d24a68b437",
                            DateOfBirth = new DateTime(2007, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELRT5TbOH1Ly9gbFtMyST22LKQUVeFceYcJdKglwnddL3w7KCmbnqF6HnBm86oNs1Q==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f703f6e7-6a38-427b-a09b-737fcdc54f16",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz"
                        },
                        new
                        {
                            Id = "b0cb2d32-fc07-435c-8e54-4f81c14d4798",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "05440694-dcdd-4f33-b1df-525e95bcb458",
                            DateOfBirth = new DateTime(2009, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mustafaozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mustafa",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUSTAFAOZKAN@GMAIL.COM",
                            NormalizedUserName = "MUSTAFAOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMtyzEyjUcaN8FdarEcMlowulC5f1xcHL6cAvedinP5A2tcTPsXWcAuuEjiDWNZ3TQ==",
                            Phone = "5423456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "135ec879-8310-4949-aad2-1fe8df8cc620",
                            TwoFactorEnabled = false,
                            UserName = "mustafaozkan"
                        },
                        new
                        {
                            Id = "1ca7dc61-1264-4dce-8b71-b89e091804b7",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "50351115-98f1-4354-bb8f-a299ad4ecc77",
                            DateOfBirth = new DateTime(2008, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRAAYDIN@HOTMAIL.COM",
                            NormalizedUserName = "ESRAAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEnBx0sNi1vUW88AZhs914saDqWhJMnqK/x7lsnGlDyAhjv9GMSHzF/mpw8BLSleog==",
                            Phone = "5397891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef8fd159-5700-474a-b1cc-c87900af6014",
                            TwoFactorEnabled = false,
                            UserName = "esraaydin"
                        },
                        new
                        {
                            Id = "9491c173-a816-4f7f-9a37-a30db67f57c6",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "05570d69-8fde-4a25-8dd3-eb78a2f634a5",
                            DateOfBirth = new DateTime(1980, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selinkar@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            ImageId = 1,
                            LastName = "Kar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELINKAR@HOTMAIL.COM",
                            NormalizedUserName = "SELINKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEElt6PdzG9VHmn0+tFGf5FnXF1eR5fKdK0Oaz7uotfmkZKJeMsJDSpIXd+yHg3y77w==",
                            Phone = "5399782513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28d4ca31-b18f-4c84-ab44-904747f6f399",
                            TwoFactorEnabled = false,
                            UserName = "selinkar"
                        },
                        new
                        {
                            Id = "08a999de-5e39-4091-b0a2-e26271a9244e",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "4f8a8540-b59f-411a-988c-478c42a4266e",
                            DateOfBirth = new DateTime(1990, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cem.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cem",
                            Gender = "Erkek",
                            ImageId = 2,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEM.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "CEMYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEDU4JZq/Bm1rbPRiVHkDTBHladz9HjYHXJ0rvqdTF0j+c1h4xWb6yjSuRFBX6TWkTw==",
                            Phone = "5323456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af99e5bf-fb9d-4e34-97fd-1bc6f4db10cf",
                            TwoFactorEnabled = false,
                            UserName = "cemyilmaz"
                        },
                        new
                        {
                            Id = "1ff5e5cc-a719-4ed5-9df9-0a491c4d84b2",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "b9fff245-b344-4f24-9dd1-f1c561bc348e",
                            DateOfBirth = new DateTime(1992, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şevval",
                            Gender = "Kadın",
                            ImageId = 3,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "sevval.demir@hotmail.com",
                            NormalizedUserName = "SEVVALDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEHggd8jzo9Ic0sPOdK8SZbEIWmmXXLxydJgLWvmbT0t3mKFSaXZkTfxJP4gZEJMUAw==",
                            Phone = "5387891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef428b3a-c040-46af-a09e-94c48c9d4a9a",
                            TwoFactorEnabled = false,
                            UserName = "sevvaldemir"
                        },
                        new
                        {
                            Id = "26fa0135-c82a-42de-aee3-11f7bab35747",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "fccbaaa9-9519-41b3-a5ca-d6b8e171e0b0",
                            DateOfBirth = new DateTime(1994, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 4,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEJQ04FKfTkBjg05COmqxpchA+FmJGaTx4P5iOXoMR0pWY0KJOBMtKC7Q8hirjANI0w==",
                            Phone = "5336549876",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e114d494-0826-48a9-af3d-32a38d24c068",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildiz"
                        },
                        new
                        {
                            Id = "be3cdd2d-24fb-41ba-80ee-0373f75fbb70",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "dc6adf27-f4e4-4c61-a5fc-44face69f2a9",
                            DateOfBirth = new DateTime(1980, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gul.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gül",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUL.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "GULSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMh1+kiuEEmM0PVYJHpwZL+M6knbvlAuadauMi1lskmsFkZU/tc5ytHVRHWDfu8FbA==",
                            Phone = "5361234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd5f3d79-05f9-4c6b-a287-7f04a1778dc7",
                            TwoFactorEnabled = false,
                            UserName = "gulsahin"
                        },
                        new
                        {
                            Id = "54b948e9-3958-4d1a-aecc-f03ce0395955",
                            AccessFailedCount = 0,
                            City = "Kayseri",
                            ConcurrencyStamp = "d349d8ef-c94f-40c1-923d-8aa6d270d209",
                            DateOfBirth = new DateTime(1987, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemal.kaya@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMAL.KAYA@GMAIL.COM",
                            NormalizedUserName = "KEMALKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEBKDVpDjLox/e/dk5HgFChloLhROu1MFPux7W7Bcl0gWSl93yGyMoTXPeF7Pt9kZfA==",
                            Phone = "5359876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48a8e92d-6a05-49ee-ac3e-4c4dc8a668a9",
                            TwoFactorEnabled = false,
                            UserName = "kemalkaya"
                        },
                        new
                        {
                            Id = "108d135b-32e6-4aab-b67e-6287821be53a",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "3421c1db-8dc1-4bcc-8d05-4285d65ba8d1",
                            DateOfBirth = new DateTime(1990, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gokhan.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gökhan",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GOKHANAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENRGQOm0jCUfstFS5YHdRyutuEiyh0XmdckYf5hCt+R1frsCklZYdt5ao0QoLRLZhg==",
                            Phone = "5321234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8da3985-e666-4d86-93c5-dcf9fdfd2d15",
                            TwoFactorEnabled = false,
                            UserName = "gokhanaydin"
                        },
                        new
                        {
                            Id = "2d1798d1-8e6a-4805-a032-13e66c107bd7",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "dfbe7d60-67c6-4f79-8a2d-1d6f3e8d14de",
                            DateOfBirth = new DateTime(1992, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seyma.yilmaz@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şeyma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEYMA.YILMAZ@HOTMAIL.COM",
                            NormalizedUserName = "SEYMAYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEFlAuEokATQ6XVfSJsXcmZpnrX30TqJPcbxuHPt8PEd23XDIzSNuP3I/qjoN10UEzA==",
                            Phone = "5399876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c6cc210-f5d3-44ba-99e1-f287abbc4f2b",
                            TwoFactorEnabled = false,
                            UserName = "seymayilmaz"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 755, DateTimeKind.Local).AddTicks(5566),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 755, DateTimeKind.Local).AddTicks(5569),
                            Url = "teacher-1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 755, DateTimeKind.Local).AddTicks(5572),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 755, DateTimeKind.Local).AddTicks(5573),
                            Url = "teacher-2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 755, DateTimeKind.Local).AddTicks(5576),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 755, DateTimeKind.Local).AddTicks(5577),
                            Url = "teacher-3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 755, DateTimeKind.Local).AddTicks(5579),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 755, DateTimeKind.Local).AddTicks(5581),
                            Url = "teacher-4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 755, DateTimeKind.Local).AddTicks(5583),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 59, 755, DateTimeKind.Local).AddTicks(5584),
                            Url = "resimyok.jpg"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TeacherId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2379),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2394),
                            UserId = "d4f37be3-e849-49cd-bee4-bf8c593c6c87"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2405),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2406),
                            UserId = "5e47b7b7-a7d0-49e5-a67d-b6c71dc5b759"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2408),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2409),
                            UserId = "deba7d51-3260-4a71-aaf8-4efb25370b3a"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2411),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2412),
                            UserId = "22f680eb-f0c1-4c4b-99d9-aa2771e9f76a"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2413),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2414),
                            UserId = "9a1fe876-fe8f-400d-8b88-f9fb0714e7c9"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2416),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2417),
                            UserId = "a3037e92-4888-4096-bf7e-5d8fa5c66654"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2419),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2419),
                            UserId = "b2eecaa5-d098-455e-980d-0c6938587727"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2421),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2422),
                            UserId = "c7412237-1a15-402e-81fc-2040e4a240bf"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2424),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2424),
                            UserId = "b0cb2d32-fc07-435c-8e54-4f81c14d4798"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2427),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2427),
                            UserId = "1ca7dc61-1264-4dce-8b71-b89e091804b7"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2489),
                            Graduation = "Çanakkale Onsekiz Mart Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2490),
                            UserId = "9491c173-a816-4f7f-9a37-a30db67f57c6"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2500),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2501),
                            UserId = "08a999de-5e39-4091-b0a2-e26271a9244e"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2503),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2504),
                            UserId = "1ff5e5cc-a719-4ed5-9df9-0a491c4d84b2"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2506),
                            Graduation = "Ege Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2507),
                            UserId = "26fa0135-c82a-42de-aee3-11f7bab35747"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2508),
                            Graduation = "Akdeniz Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2509),
                            UserId = "be3cdd2d-24fb-41ba-80ee-0373f75fbb70"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2512),
                            Graduation = "Erciyes Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2512),
                            UserId = "54b948e9-3958-4d1a-aecc-f03ce0395955"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2514),
                            Graduation = "Çukurova Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2515),
                            UserId = "108d135b-32e6-4aab-b67e-6287821be53a"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2517),
                            Graduation = "Uludağ Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 2, 13, 28, 57, 847, DateTimeKind.Local).AddTicks(2517),
                            UserId = "2d1798d1-8e6a-4805-a032-13e66c107bd7"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 5,
                            BranchId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            BranchId = 6
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 9
                        },
                        new
                        {
                            TeacherId = 8,
                            BranchId = 10
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Order")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Order", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Order");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}

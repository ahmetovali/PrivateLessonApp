// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrivateLesson.Data.Concrete.EfCore.Context;

#nullable disable

namespace PrivateLesson.Data.Migrations
{
    [DbContext(typeof(PrivateLessonContext))]
    partial class PrivateLessonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4f67603c-224f-43bc-a46c-c09a4ceb48a9",
                            RoleId = "6b588377-b6bc-440d-813a-771eeaa79253"
                        },
                        new
                        {
                            UserId = "aa91d4a0-9b30-4593-82a6-051048902a2f",
                            RoleId = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c"
                        },
                        new
                        {
                            UserId = "a29e0df9-3eb3-4f66-92e2-a69168f61468",
                            RoleId = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c"
                        },
                        new
                        {
                            UserId = "5323ca7a-13f4-4bb5-a0c4-69f51584b27a",
                            RoleId = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c"
                        },
                        new
                        {
                            UserId = "2b26e93b-fb65-4f91-a24d-5f2313f02b9d",
                            RoleId = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c"
                        },
                        new
                        {
                            UserId = "9762298a-db23-4fce-a190-9ed853a2e0b5",
                            RoleId = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c"
                        },
                        new
                        {
                            UserId = "9ddc724b-1543-4ce2-8edf-afa6d3239bb8",
                            RoleId = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c"
                        },
                        new
                        {
                            UserId = "baa4d49a-b70e-40a9-a7d0-a3597f8c646a",
                            RoleId = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c"
                        },
                        new
                        {
                            UserId = "c6ee570c-500d-4c78-a29d-44755ab605a6",
                            RoleId = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c"
                        },
                        new
                        {
                            UserId = "af88986c-281e-48b9-b4b9-f97942dc9a84",
                            RoleId = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c"
                        },
                        new
                        {
                            UserId = "6b5a3284-b71f-48a9-9631-3f2a4c117546",
                            RoleId = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c"
                        },
                        new
                        {
                            UserId = "447de64b-34d7-49ff-8b33-1db3328938a7",
                            RoleId = "cdd1d0c1-9b00-4de9-abe1-0158fd9f477f"
                        },
                        new
                        {
                            UserId = "776eb689-ffc7-4715-80b6-9586009b7c3e",
                            RoleId = "cdd1d0c1-9b00-4de9-abe1-0158fd9f477f"
                        },
                        new
                        {
                            UserId = "ac276751-8f40-4d8c-928a-dbad034f6e98",
                            RoleId = "cdd1d0c1-9b00-4de9-abe1-0158fd9f477f"
                        },
                        new
                        {
                            UserId = "1937b64a-9bc6-496f-8305-9e6879b3df5e",
                            RoleId = "cdd1d0c1-9b00-4de9-abe1-0158fd9f477f"
                        },
                        new
                        {
                            UserId = "28e67e95-fa20-451c-a9f0-583722d24200",
                            RoleId = "cdd1d0c1-9b00-4de9-abe1-0158fd9f477f"
                        },
                        new
                        {
                            UserId = "59ede6e1-c871-40f1-aa50-640f86835ed2",
                            RoleId = "cdd1d0c1-9b00-4de9-abe1-0158fd9f477f"
                        },
                        new
                        {
                            UserId = "9c4d427a-c0b1-4893-99e1-e50aad36fd56",
                            RoleId = "cdd1d0c1-9b00-4de9-abe1-0158fd9f477f"
                        },
                        new
                        {
                            UserId = "2b19b395-3462-42ea-a0df-a0ae4b89ab0b",
                            RoleId = "cdd1d0c1-9b00-4de9-abe1-0158fd9f477f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matamatik",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8332),
                            Description = "Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8336),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Fizik",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8341),
                            Description = "Fizik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8342),
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8343),
                            Description = "Kimya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8344),
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Biyoloji",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8345),
                            Description = "Biyoloji Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8346),
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Tarih",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8347),
                            Description = "Tarih Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8348),
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Coğrafya",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8349),
                            Description = "Coğrafya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8350),
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8351),
                            Description = "İngilizce Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8351),
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Almanca",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8353),
                            Description = "Almanca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8353),
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Fransızca",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8355),
                            Description = "Fransızca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8355),
                            Url = "fransizca"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Felsefe",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8356),
                            Description = "Felsefe Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8357),
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 11,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8358),
                            Description = "Müzik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8359),
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 12,
                            BranchName = "Resim",
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8360),
                            Description = "Resim Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 543, DateTimeKind.Local).AddTicks(8361),
                            Url = "resim"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "4f67603c-224f-43bc-a46c-c09a4ceb48a9"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "aa91d4a0-9b30-4593-82a6-051048902a2f"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "a29e0df9-3eb3-4f66-92e2-a69168f61468"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "5323ca7a-13f4-4bb5-a0c4-69f51584b27a"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "2b26e93b-fb65-4f91-a24d-5f2313f02b9d"
                        },
                        new
                        {
                            Id = 6,
                            UserId = "9762298a-db23-4fce-a190-9ed853a2e0b5"
                        },
                        new
                        {
                            Id = 7,
                            UserId = "9ddc724b-1543-4ce2-8edf-afa6d3239bb8"
                        },
                        new
                        {
                            Id = 8,
                            UserId = "baa4d49a-b70e-40a9-a7d0-a3597f8c646a"
                        },
                        new
                        {
                            Id = 9,
                            UserId = "c6ee570c-500d-4c78-a29d-44755ab605a6"
                        },
                        new
                        {
                            Id = 10,
                            UserId = "af88986c-281e-48b9-b4b9-f97942dc9a84"
                        },
                        new
                        {
                            Id = 11,
                            UserId = "6b5a3284-b71f-48a9-9631-3f2a4c117546"
                        },
                        new
                        {
                            Id = 12,
                            UserId = "447de64b-34d7-49ff-8b33-1db3328938a7"
                        },
                        new
                        {
                            Id = 13,
                            UserId = "776eb689-ffc7-4715-80b6-9586009b7c3e"
                        },
                        new
                        {
                            Id = 14,
                            UserId = "ac276751-8f40-4d8c-928a-dbad034f6e98"
                        },
                        new
                        {
                            Id = 15,
                            UserId = "1937b64a-9bc6-496f-8305-9e6879b3df5e"
                        },
                        new
                        {
                            Id = 16,
                            UserId = "28e67e95-fa20-451c-a9f0-583722d24200"
                        },
                        new
                        {
                            Id = 17,
                            UserId = "59ede6e1-c871-40f1-aa50-640f86835ed2"
                        },
                        new
                        {
                            Id = 18,
                            UserId = "9c4d427a-c0b1-4893-99e1-e50aad36fd56"
                        },
                        new
                        {
                            Id = 19,
                            UserId = "2b19b395-3462-42ea-a0df-a0ae4b89ab0b"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("TeacherId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6b588377-b6bc-440d-813a-771eeaa79253",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cdd1d0c1-9b00-4de9-abe1-0158fd9f477f",
                            Description = "Öğretmenler",
                            Name = "Ogretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "4425cdbf-decb-42d2-a980-8f6a4fa1ca8c",
                            Description = "Öğrenciler",
                            Name = "Ogrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4f67603c-224f-43bc-a46c-c09a4ceb48a9",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "79a01474-3c20-47fb-a28f-e6d81dcb153c",
                            DateOfBirth = new DateTime(1998, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetovali1903@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Ovalı",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETOVALI1903@GMAIL.COM",
                            NormalizedUserName = "AHMETOVALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEG1LBTNOSG32ErUBP8VMYl6hZI7LpSeIo1zzLTaAO0mweMhvL/obpx7EsIGqq0wqoA==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b84771f0-fe16-444a-9271-a396582b8abc",
                            TwoFactorEnabled = false,
                            UserName = "ahmetovali"
                        },
                        new
                        {
                            Id = "aa91d4a0-9b30-4593-82a6-051048902a2f",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "49250853-23f2-414a-8aea-fbd0bc3a90e5",
                            DateOfBirth = new DateTime(1988, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEC3cMQgGBSxuwTwad0O8EBSHWvI9T9y0ZaYQQNFx20AGk4LNFHq02uO/eMALdfDB2A==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b5aa0d0-48e5-4b35-aac8-965975ee7c28",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = "a29e0df9-3eb3-4f66-92e2-a69168f61468",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "1084754c-b822-40a1-961c-a92e0785b6f0",
                            DateOfBirth = new DateTime(1995, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selin.ozcan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Özcan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELIN.OZCAN@EXAMPLE.COM",
                            NormalizedUserName = "SELINOZCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBw+6oYhqRzhE3Q1VlQYbJ0/iY7LsDRiPrzaLz/RGA+IOW1tQ+OEoYxIOBdNrAxGHA==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10cef4f0-0e54-4982-b0ec-cbaa3cf46710",
                            TwoFactorEnabled = false,
                            UserName = "selinozcan"
                        },
                        new
                        {
                            Id = "5323ca7a-13f4-4bb5-a0c4-69f51584b27a",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "5107fb6d-bb23-4fd8-8970-9502f5a676cf",
                            DateOfBirth = new DateTime(1990, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.kaya@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.KAYA@EXAMPLE.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEL4F0wlAPKqC2IkYd4OGwNNG99qNxU1scERFijYce3HSPaAZBO3JkZqlzW4s3rhjig==",
                            Phone = "5551112233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6346c395-9233-49af-a948-134d21b6aec2",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "2b26e93b-fb65-4f91-a24d-5f2313f02b9d",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "2a6215cf-8074-442d-9aa3-c266b7c74d4b",
                            DateOfBirth = new DateTime(1998, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seda.dogan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Seda",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Doğan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEDA.DOGAN@EXAMPLE.COM",
                            NormalizedUserName = "SEDADOGAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHaF0c1SGU9c+wU24DNZv0PpvcqdCLiAR/p6UPeX6sMfY4LBG985yeNYhnC3TF07kw==",
                            Phone = "5554445566",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "daec400e-f329-40fa-9e48-d2155bc367c3",
                            TwoFactorEnabled = false,
                            UserName = "sedadogan"
                        },
                        new
                        {
                            Id = "9762298a-db23-4fce-a190-9ed853a2e0b5",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "d200d823-1908-47e2-8dd5-5bb3f6359c24",
                            DateOfBirth = new DateTime(1985, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "murat.gunes@example.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURAT.GUNES@EXAMPLE.COM",
                            NormalizedUserName = "MURATGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAEDGcgs85UPBrwPb4thmUEwO4CjMT30Skh4VfLWjcBB0xS/0gbpcoF23R7ietHSZv0A==",
                            Phone = "5558889999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47780a85-f16c-47b0-b403-d725dc0637d5",
                            TwoFactorEnabled = false,
                            UserName = "muratgunes"
                        },
                        new
                        {
                            Id = "9ddc724b-1543-4ce2-8edf-afa6d3239bb8",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "a3afec62-7076-4b83-94e8-8b21c4f15281",
                            DateOfBirth = new DateTime(1991, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "AYSEYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEG8BXeGSDeau2AZ+E0WGmOdRst/RFtT4u/pUXIYYHVGvi5r17mDPgKfP+65F0JHZ9g==",
                            Phone = "5553334444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d66493ac-5bc6-4cea-822b-1003cd58d19b",
                            TwoFactorEnabled = false,
                            UserName = "ayseyildiz"
                        },
                        new
                        {
                            Id = "baa4d49a-b70e-40a9-a7d0-a3597f8c646a",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "20419a0d-3db8-460d-8177-333363e48bb7",
                            DateOfBirth = new DateTime(1980, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ercan.ozturk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ercan",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERCAN.OZTURK@EXAMPLE.COM",
                            NormalizedUserName = "ERCANOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEAmmmimXhOWhtDcJ/Aybo/IKzjSH2QD2AsK+bM8g8RqHj7rQTX/6RCyMXCH6EvSnDg==",
                            Phone = "5552223344",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b46e1da-ba5e-44fd-a368-8a97a61be5d6",
                            TwoFactorEnabled = false,
                            UserName = "ercanozturk"
                        },
                        new
                        {
                            Id = "c6ee570c-500d-4c78-a29d-44755ab605a6",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "23cc5c80-bdf6-4c0e-bcaf-9c69262a125d",
                            DateOfBirth = new DateTime(1996, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.guler@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Güler",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.GULER@EXAMPLE.COM",
                            NormalizedUserName = "ALIGULER",
                            PasswordHash = "AQAAAAIAAYagAAAAEFqQDkF6Siqg0yrmnwM42r977eGgeVIZk6Lgk6rk6oUO6Xlyp+MMD2znrrS2cOsWFg==",
                            Phone = "5557778899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35f68058-7573-43e6-91a4-9aebcb733bbe",
                            TwoFactorEnabled = false,
                            UserName = "aliguler"
                        },
                        new
                        {
                            Id = "af88986c-281e-48b9-b4b9-f97942dc9a84",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "c2af6261-c091-4601-85af-e39ef4c64aee",
                            DateOfBirth = new DateTime(1992, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hatice.aydin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Hatice",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "HATICE.AYDIN@EXAMPLE.COM",
                            NormalizedUserName = "HATICEAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAEqquqE9QldcHRYhQep3q5geaBWioMSKBZ/fhX7M3x8jbEFNHNL4v8/46Z/mLw5eg==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8885c1cf-7eea-4b2f-bc83-c0e6658b0b76",
                            TwoFactorEnabled = false,
                            UserName = "haticeaydin"
                        },
                        new
                        {
                            Id = "6b5a3284-b71f-48a9-9631-3f2a4c117546",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "5a8e220e-645b-4208-ae2d-b2cacb87ffbe",
                            DateOfBirth = new DateTime(1987, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mert.kilic@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mert",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kılıç",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT.KILIC@EXAMPLE.COM",
                            NormalizedUserName = "MERTKILIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEJdghufyd3/f3pSrNPfJCA7wwaXY5UyYz7L2smXYlW3Srsz8YHZsq+rRiLZFPY0Weg==",
                            Phone = "5551112233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e3ebafe-ea8b-421e-9011-69b899d530b0",
                            TwoFactorEnabled = false,
                            UserName = "mertkilic"
                        },
                        new
                        {
                            Id = "447de64b-34d7-49ff-8b33-1db3328938a7",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "62fe2b00-cc73-4a91-af72-f21ad10b4b94",
                            DateOfBirth = new DateTime(1994, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asli.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Aslı",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASLI.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "ASLIYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEIqbkt97/PuxB+hrbJy2+14FILm7jRHesvUSekQ4N7sSbUZcWP0On5vIQ6cmHiB5aQ==",
                            Phone = "5555556677",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ff10a86-0122-4b92-95b7-4ce03b9b41f7",
                            TwoFactorEnabled = false,
                            UserName = "asliyilmaz"
                        },
                        new
                        {
                            Id = "776eb689-ffc7-4715-80b6-9586009b7c3e",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "dcd9bd82-bc53-45d0-88b6-f0f14bd018f5",
                            DateOfBirth = new DateTime(1991, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emre.yildir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 1,
                            LastName = "Yıldır",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE.YILDIR@EXAMPLE.COM",
                            NormalizedUserName = "EMREYILDIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEMNdPS6QNxw5wsjm9hlrmK/Wf1wxoTea02PClhQ/2Ya6jfAuPAnBNl27AFo2PLMDyA==",
                            Phone = "5558887744",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "359c31e2-edc8-465b-9b49-0cf9b52601f0",
                            TwoFactorEnabled = false,
                            UserName = "emreyildir"
                        },
                        new
                        {
                            Id = "ac276751-8f40-4d8c-928a-dbad034f6e98",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "aaeb5b4f-7eb0-4a2a-a13e-6d4b86f3dff8",
                            DateOfBirth = new DateTime(1985, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ebru.ozturk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ebru",
                            Gender = "Kadın",
                            ImageId = 2,
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "EBRU.OZTURK@EXAMPLE.COM",
                            NormalizedUserName = "EBRUOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEK91g5fHOdxMKKTfsP+BRcoCclL7GJl5Ps9oBg/f9cS+1X6aEvthaNbELOYWlJbYqw==",
                            Phone = "5552221133",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18e47780-6f23-4a84-b84d-4ae61572625a",
                            TwoFactorEnabled = false,
                            UserName = "ebruozturk"
                        },
                        new
                        {
                            Id = "1937b64a-9bc6-496f-8305-9e6879b3df5e",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "5d0f6fe5-714c-4e56-8398-21d03f162f8f",
                            DateOfBirth = new DateTime(1999, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "umut.celik@example.com",
                            EmailConfirmed = true,
                            FirstName = "Umut",
                            Gender = "Erkek",
                            ImageId = 3,
                            LastName = "Çelik",
                            LockoutEnabled = false,
                            NormalizedEmail = "UMUT.CELIK@EXAMPLE.COM",
                            NormalizedUserName = "UMUTCELIK",
                            PasswordHash = "AQAAAAIAAYagAAAAEAsUDPyTUaRnZR1351fMKcthj2Q3BsfOZk5vRWzW5Hj/C29JyGBYyRz9AOeg8TleDw==",
                            Phone = "5552223344",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ebf2478-b876-48d3-a7e4-a057d7f52617",
                            TwoFactorEnabled = false,
                            UserName = "umutcelik"
                        },
                        new
                        {
                            Id = "28e67e95-fa20-451c-a9f0-583722d24200",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "0d0c6d50-f073-40d4-8b4c-63aa6bfc087d",
                            DateOfBirth = new DateTime(1988, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aylin.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Aylin",
                            Gender = "Kadın",
                            ImageId = 4,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYLIN.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "AYLINDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAELW+YJQZyeqw4ucIFXnex0tmyWClHl5BTbPEgByH0zeJBGXHfwSbp3DZjHDNoqDuIA==",
                            Phone = "5557779900",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49c90e37-0557-49a5-9326-91a42fa1854a",
                            TwoFactorEnabled = false,
                            UserName = "aylindemir"
                        },
                        new
                        {
                            Id = "59ede6e1-c871-40f1-aa50-640f86835ed2",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "4818699b-8e86-4b22-bbf2-12b30d0a1f63",
                            DateOfBirth = new DateTime(1997, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "murat.can@example.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Can",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURAT.CAN@EXAMPLE.COM",
                            NormalizedUserName = "MURATCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC7Q0rg0iN8xtwtU+bD+4hMuGBr6UU/+K75hO+0ExNHbrOU6d28pk04t9lzuzzgAcA==",
                            Phone = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f73ddc86-3d6b-4d49-bf70-376b6c556326",
                            TwoFactorEnabled = false,
                            UserName = "muratcan"
                        },
                        new
                        {
                            Id = "9c4d427a-c0b1-4893-99e1-e50aad36fd56",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "f205c7a6-f2ce-4570-ae93-766cbb83516e",
                            DateOfBirth = new DateTime(1994, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elif.akyildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Akyıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF.AKYILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "ELIFAKYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEA92S1U161kzqB1r1hk08+L10+EAkBHR8r7IMQyISxnqcydfMxNE05Uff4KrwiVMwA==",
                            Phone = "5558887766",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1821cccf-c921-4dca-a68e-479c1bff8b42",
                            TwoFactorEnabled = false,
                            UserName = "elifakyildiz"
                        },
                        new
                        {
                            Id = "2b19b395-3462-42ea-a0df-a0ae4b89ab0b",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "89509709-61fa-42c8-a6bc-1060a3dac4f0",
                            DateOfBirth = new DateTime(1992, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "goksu.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Göksu",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKSU.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "GOKSUDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEO6a2av+1N+CLpB8NNRbDtVJP0Y5HPTC2S9AAKfkA3Rn07T2SOMp9hGAds8hPc/7pA==",
                            Phone = "5554443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b36d0e22-0602-4be8-a206-502fe3c8430d",
                            TwoFactorEnabled = false,
                            UserName = "goksudemir"
                        },
                        new
                        {
                            Id = "c460bb67-ff96-462a-88bb-67fdde388e51",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "1c0c58fc-0b3b-4a4a-85eb-dc94cebd47d5",
                            DateOfBirth = new DateTime(1985, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emre.yildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE.YILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "EMREYILDIZ",
                            Phone = "5301234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7aa96fee-e4b7-4347-978e-a700687cceaa",
                            TwoFactorEnabled = false,
                            UserName = "emreyildiz"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 544, DateTimeKind.Local).AddTicks(6514),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 544, DateTimeKind.Local).AddTicks(6516),
                            Url = "1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 544, DateTimeKind.Local).AddTicks(6518),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 544, DateTimeKind.Local).AddTicks(6518),
                            Url = "2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 544, DateTimeKind.Local).AddTicks(6520),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 544, DateTimeKind.Local).AddTicks(6520),
                            Url = "3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 544, DateTimeKind.Local).AddTicks(6521),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 544, DateTimeKind.Local).AddTicks(6522),
                            Url = "4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 544, DateTimeKind.Local).AddTicks(6523),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 11, 544, DateTimeKind.Local).AddTicks(6523),
                            Url = "5.jpg"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TeacherId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3362),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3378),
                            UserId = "aa91d4a0-9b30-4593-82a6-051048902a2f"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3391),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3392),
                            UserId = "a29e0df9-3eb3-4f66-92e2-a69168f61468"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3440),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3441),
                            UserId = "5323ca7a-13f4-4bb5-a0c4-69f51584b27a"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3443),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3444),
                            UserId = "2b26e93b-fb65-4f91-a24d-5f2313f02b9d"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3445),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3446),
                            UserId = "9762298a-db23-4fce-a190-9ed853a2e0b5"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3449),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3449),
                            UserId = "9ddc724b-1543-4ce2-8edf-afa6d3239bb8"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3452),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3452),
                            UserId = "baa4d49a-b70e-40a9-a7d0-a3597f8c646a"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3454),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3455),
                            UserId = "c6ee570c-500d-4c78-a29d-44755ab605a6"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3457),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3458),
                            UserId = "af88986c-281e-48b9-b4b9-f97942dc9a84"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3460),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3460),
                            UserId = "6b5a3284-b71f-48a9-9631-3f2a4c117546"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3516),
                            Graduation = "Kırıkkale Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3517),
                            UserId = "447de64b-34d7-49ff-8b33-1db3328938a7"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3526),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3527),
                            UserId = "776eb689-ffc7-4715-80b6-9586009b7c3e"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3529),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3529),
                            UserId = "ac276751-8f40-4d8c-928a-dbad034f6e98"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3531),
                            Graduation = "Yıldız Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3532),
                            UserId = "1937b64a-9bc6-496f-8305-9e6879b3df5e"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3534),
                            Graduation = "Akdeniz Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3535),
                            UserId = "28e67e95-fa20-451c-a9f0-583722d24200"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3538),
                            Graduation = "Erciyes Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3539),
                            UserId = "59ede6e1-c871-40f1-aa50-640f86835ed2"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3540),
                            Graduation = "Çukurova Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3541),
                            UserId = "9c4d427a-c0b1-4893-99e1-e50aad36fd56"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3543),
                            Graduation = "Uludağ Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 1, 18, 20, 9, 668, DateTimeKind.Local).AddTicks(3543),
                            UserId = "2b19b395-3462-42ea-a0df-a0ae4b89ab0b"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 5,
                            BranchId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            BranchId = 6
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 9
                        },
                        new
                        {
                            TeacherId = 8,
                            BranchId = 10
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Order")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Order", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Order");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}

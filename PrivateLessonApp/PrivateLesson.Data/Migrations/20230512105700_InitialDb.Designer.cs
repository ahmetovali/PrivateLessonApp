// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrivateLesson.Data.Concrete.EfCore.Context;

#nullable disable

namespace PrivateLesson.Data.Migrations
{
    [DbContext(typeof(PrivateLessonContext))]
    [Migration("20230512105700_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "55bd22e6-2a9d-4ba2-b9ca-ccaf382a5b00",
                            RoleId = "e3119a67-2feb-47b8-ba93-e3db9a540cd6"
                        },
                        new
                        {
                            UserId = "a5c98e9f-44b0-4c81-818e-e91bc42c953e",
                            RoleId = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3"
                        },
                        new
                        {
                            UserId = "ec0d588f-cb8a-4c7e-ae02-72074845f3b8",
                            RoleId = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3"
                        },
                        new
                        {
                            UserId = "65bb8122-a0ac-4371-b0c1-80235e213edb",
                            RoleId = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3"
                        },
                        new
                        {
                            UserId = "1e7ed4af-97e2-406a-9def-16ab848314c7",
                            RoleId = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3"
                        },
                        new
                        {
                            UserId = "db79a216-2700-4d09-ae2f-f09d30ed356f",
                            RoleId = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3"
                        },
                        new
                        {
                            UserId = "b9e5e681-4104-41e8-86b0-0258ff198b27",
                            RoleId = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3"
                        },
                        new
                        {
                            UserId = "c3dd3f7c-ba43-4963-b434-d50b737c1743",
                            RoleId = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3"
                        },
                        new
                        {
                            UserId = "cb9fe7b2-b43b-43e4-b629-1999e60cd98f",
                            RoleId = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3"
                        },
                        new
                        {
                            UserId = "9bbc795a-c3f9-4a64-a3d6-dafe8f65b160",
                            RoleId = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3"
                        },
                        new
                        {
                            UserId = "1a177ce2-5931-406d-9119-3347ec472ba9",
                            RoleId = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3"
                        },
                        new
                        {
                            UserId = "c8f66982-61c8-401f-9c09-493ab9872362",
                            RoleId = "a0f72869-20a4-452b-b0df-32ca88a2cd42"
                        },
                        new
                        {
                            UserId = "7fd92995-4546-4880-b68f-e9915e962802",
                            RoleId = "a0f72869-20a4-452b-b0df-32ca88a2cd42"
                        },
                        new
                        {
                            UserId = "736b4336-3fbd-4b46-a3a5-8968798e94d1",
                            RoleId = "a0f72869-20a4-452b-b0df-32ca88a2cd42"
                        },
                        new
                        {
                            UserId = "57aa0d8b-c87f-48ef-8dda-b95db2b49c54",
                            RoleId = "a0f72869-20a4-452b-b0df-32ca88a2cd42"
                        },
                        new
                        {
                            UserId = "e68702cf-3d87-482d-a4a4-3822e6ab278d",
                            RoleId = "a0f72869-20a4-452b-b0df-32ca88a2cd42"
                        },
                        new
                        {
                            UserId = "d210a19c-9c77-47b8-9b1a-0a63f951c465",
                            RoleId = "a0f72869-20a4-452b-b0df-32ca88a2cd42"
                        },
                        new
                        {
                            UserId = "1481f491-b373-4b15-a730-9e67eb37249e",
                            RoleId = "a0f72869-20a4-452b-b0df-32ca88a2cd42"
                        },
                        new
                        {
                            UserId = "eff716f0-d4a5-4fe0-819f-08e33ae5388a",
                            RoleId = "a0f72869-20a4-452b-b0df-32ca88a2cd42"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Adverts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 4,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 388, DateTimeKind.Local).AddTicks(8279),
                            Description = "ilan",
                            IsApproved = true,
                            Price = 45m,
                            TeacherId = 4,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 388, DateTimeKind.Local).AddTicks(8283),
                            Url = "ilan"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(804),
                            Description = "Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(807),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Fizik",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(812),
                            Description = "Fizik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(812),
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(814),
                            Description = "Kimya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(815),
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Biyoloji",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(816),
                            Description = "Biyoloji Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(817),
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Tarih",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(818),
                            Description = "Tarih Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(818),
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Coğrafya",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(820),
                            Description = "Coğrafya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(820),
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(822),
                            Description = "İngilizce Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(822),
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Almanca",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(824),
                            Description = "Almanca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(824),
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Fransızca",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(825),
                            Description = "Fransızca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(826),
                            Url = "fransizca"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Felsefe",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(827),
                            Description = "Felsefe Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(828),
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 11,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(829),
                            Description = "Müzik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(830),
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 12,
                            BranchName = "Resim",
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(831),
                            Description = "Resim Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(831),
                            Url = "resim"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "55bd22e6-2a9d-4ba2-b9ca-ccaf382a5b00"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "a5c98e9f-44b0-4c81-818e-e91bc42c953e"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "ec0d588f-cb8a-4c7e-ae02-72074845f3b8"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "65bb8122-a0ac-4371-b0c1-80235e213edb"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "1e7ed4af-97e2-406a-9def-16ab848314c7"
                        },
                        new
                        {
                            Id = 6,
                            UserId = "db79a216-2700-4d09-ae2f-f09d30ed356f"
                        },
                        new
                        {
                            Id = 7,
                            UserId = "b9e5e681-4104-41e8-86b0-0258ff198b27"
                        },
                        new
                        {
                            Id = 8,
                            UserId = "c3dd3f7c-ba43-4963-b434-d50b737c1743"
                        },
                        new
                        {
                            Id = 9,
                            UserId = "cb9fe7b2-b43b-43e4-b629-1999e60cd98f"
                        },
                        new
                        {
                            Id = 10,
                            UserId = "9bbc795a-c3f9-4a64-a3d6-dafe8f65b160"
                        },
                        new
                        {
                            Id = 11,
                            UserId = "1a177ce2-5931-406d-9119-3347ec472ba9"
                        },
                        new
                        {
                            Id = 12,
                            UserId = "c8f66982-61c8-401f-9c09-493ab9872362"
                        },
                        new
                        {
                            Id = 13,
                            UserId = "7fd92995-4546-4880-b68f-e9915e962802"
                        },
                        new
                        {
                            Id = 14,
                            UserId = "736b4336-3fbd-4b46-a3a5-8968798e94d1"
                        },
                        new
                        {
                            Id = 15,
                            UserId = "57aa0d8b-c87f-48ef-8dda-b95db2b49c54"
                        },
                        new
                        {
                            Id = 16,
                            UserId = "e68702cf-3d87-482d-a4a4-3822e6ab278d"
                        },
                        new
                        {
                            Id = 17,
                            UserId = "d210a19c-9c77-47b8-9b1a-0a63f951c465"
                        },
                        new
                        {
                            Id = 18,
                            UserId = "1481f491-b373-4b15-a730-9e67eb37249e"
                        },
                        new
                        {
                            Id = 19,
                            UserId = "eff716f0-d4a5-4fe0-819f-08e33ae5388a"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e3119a67-2feb-47b8-ba93-e3db9a540cd6",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a0f72869-20a4-452b-b0df-32ca88a2cd42",
                            Description = "Öğretmenler",
                            Name = "Ogretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "1a76bd65-23b1-400b-bfb7-bf3fc24c98f3",
                            Description = "Öğrenciler",
                            Name = "Ogrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "55bd22e6-2a9d-4ba2-b9ca-ccaf382a5b00",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "9d4ce546-200f-4119-8b4f-6368de512985",
                            DateOfBirth = new DateTime(1998, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Ovalı",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET@HOTMAIL.COM",
                            NormalizedUserName = "AHMET",
                            PasswordHash = "AQAAAAIAAYagAAAAEMTgVe7DJst3E6DTKyCI88B5XGlVBy36OOBqBvYxx+kfBX58S18OCh2BzpHZ/3J32A==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b874daf-5e71-4b2c-90de-593dd35494fa",
                            TwoFactorEnabled = false,
                            UserName = "ahmet"
                        },
                        new
                        {
                            Id = "a5c98e9f-44b0-4c81-818e-e91bc42c953e",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "8beda5ad-fcaa-4752-8b4b-916a28a85295",
                            DateOfBirth = new DateTime(2007, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "denizcakir@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Çakır",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZCAKIR@HOTMAIL.COM",
                            NormalizedUserName = "DENIZCAKIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOa4k9WWg0asjgU9bYbhQ0x4JJDGOY0XI7kTeh9rCEqCbItoenPjlv8RlRfW0sJQxQ==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29fca088-662c-4ade-8947-60b56abc043a",
                            TwoFactorEnabled = false,
                            UserName = "denizcakir"
                        },
                        new
                        {
                            Id = "ec0d588f-cb8a-4c7e-ae02-72074845f3b8",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "54f2e7e7-ceff-4a3e-9f50-8a23c08d9516",
                            DateOfBirth = new DateTime(2002, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetyilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETYILMAZ@GMAİL.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEHddKFJs9x+vtFVfgNKL2RqNxojcXqAz+kAqag2g1jiqUiHy4JPyWAiP8kLagX8vZg==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "829f3185-07a3-49b1-8fe3-ec50e138bc1e",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = "65bb8122-a0ac-4371-b0c1-80235e213edb",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "010f420e-bac8-46b2-8b94-6f05f1487a42",
                            DateOfBirth = new DateTime(2001, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.demir@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.DEMIR@YAHOO.COM",
                            NormalizedUserName = "AYSEDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEIROzyTUAyfBUsdEYHWZ2HzjBa7t/uk8nSF/xTG6pZxuZySUEcih22rbk1aT8Uia9w==",
                            Phone = "5329876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1685b4b-c0d3-49a9-8b87-14adac91a31c",
                            TwoFactorEnabled = false,
                            UserName = "aysedemir"
                        },
                        new
                        {
                            Id = "1e7ed4af-97e2-406a-9def-16ab848314c7",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "e6b02f4b-980f-4ad2-ba47-1c8647aa7732",
                            DateOfBirth = new DateTime(2009, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmetkaya@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETKAYA@HOTMAIL.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEL94g7+JaXBPEp8t5C4473to3mXpFeTRqfK8CjsBzAiOR3ll2k+BQ1tIntYx5aEKqA==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56fc4490-280b-41ed-a6ac-67a2fd6ec3a3",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "db79a216-2700-4d09-ae2f-f09d30ed356f",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "363a8285-634e-4435-8887-8f4b14bdc067",
                            DateOfBirth = new DateTime(2003, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatmasahin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMASAHIN@GMAIL.COM",
                            NormalizedUserName = "FATMASAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEn5jHSvNMeBrEhbO96aZ92bY4NmG6oyY4Oi+PPu1k462ZFDMHMFmYy+LVhyYr5M4w==",
                            Phone = "5334567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbb2c789-f183-4f33-8e76-a7d1c1c7eddb",
                            TwoFactorEnabled = false,
                            UserName = "fatmasahin"
                        },
                        new
                        {
                            Id = "b9e5e681-4104-41e8-86b0-0258ff198b27",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "cabd8f66-7cbf-46f0-9077-09224534fe3a",
                            DateOfBirth = new DateTime(2008, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emreakin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Akın",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMREAKIN@HOTMAIL.COM",
                            NormalizedUserName = "EMREAKIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHw+0v3pLCag9vscBmkNShBwsq0c7inyj9TB35qsY3mwsiPpJ5ehpdpQHhqtwLJeHQ==",
                            Phone = "5379876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "571899de-c24e-4174-96a9-b3717f924d26",
                            TwoFactorEnabled = false,
                            UserName = "emreakin"
                        },
                        new
                        {
                            Id = "c3dd3f7c-ba43-4963-b434-d50b737c1743",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "64195c65-5e6f-4e38-bd00-ee1ceb771509",
                            DateOfBirth = new DateTime(2005, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynepturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Türk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEPTURK@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEBaMSh67eRIoJkNoFqedkkCnM5YBxoc8fshpemSJ/hOU1Rm6vUGXQdNZ6gRsUYGx1w==",
                            Phone = "5336549872",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cc6f14a-64aa-42d7-aec7-89e2dc49fea8",
                            TwoFactorEnabled = false,
                            UserName = "zeynepturk"
                        },
                        new
                        {
                            Id = "cb9fe7b2-b43b-43e4-b629-1999e60cd98f",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "0d890b37-c546-4fa7-8ddc-b60314b4d5f6",
                            DateOfBirth = new DateTime(2007, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBnYrcmX6zJsPgPZIZSyoyH0+4265Ryk0Q0ztwNW6MOS//DuGjfeLJf6zOwmyxGr0Q==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9cdb89d-c43d-498e-812c-5741b2c636cb",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz"
                        },
                        new
                        {
                            Id = "9bbc795a-c3f9-4a64-a3d6-dafe8f65b160",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "fba986a4-6e2f-417e-b7ed-e6460a626194",
                            DateOfBirth = new DateTime(2009, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mustafaozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mustafa",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUSTAFAOZKAN@GMAIL.COM",
                            NormalizedUserName = "MUSTAFAOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFdAS9Eo8jf4uNQ7Ux3HKIWY6faNJ7GJni44Tixj2MQOqJa8FOtLa4dFZLxReMLhHg==",
                            Phone = "5423456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "283958d4-6644-4fcf-a83c-c058a236759e",
                            TwoFactorEnabled = false,
                            UserName = "mustafaozkan"
                        },
                        new
                        {
                            Id = "1a177ce2-5931-406d-9119-3347ec472ba9",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "4c1dd918-e1af-49a2-844c-ddbc78e1dd0b",
                            DateOfBirth = new DateTime(2008, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRAAYDIN@HOTMAIL.COM",
                            NormalizedUserName = "ESRAAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEg5qZtjf72zmwINc9YYrLPk5NJQjC/5AF0m59lDLums6pXnMSgSbLkOYZFCJe0C0Q==",
                            Phone = "5397891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b44d094-4d81-49fe-af36-17e34f8d32b2",
                            TwoFactorEnabled = false,
                            UserName = "esraaydin"
                        },
                        new
                        {
                            Id = "c8f66982-61c8-401f-9c09-493ab9872362",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "f6f05f6e-db67-4603-8edc-1d0b170e4918",
                            DateOfBirth = new DateTime(1980, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selinkar@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            ImageId = 1,
                            LastName = "Kar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELINKAR@HOTMAIL.COM",
                            NormalizedUserName = "SELINKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOkcH3Im9mVQPwNMmbbx7SvM9fRVWboSmbSlarWNK3sG1x6ZSK/Whskqhn20XY85wQ==",
                            Phone = "5399782513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4e9c978-1a42-43cf-9ec5-9cbeaa4a1d88",
                            TwoFactorEnabled = false,
                            UserName = "selinkar"
                        },
                        new
                        {
                            Id = "7fd92995-4546-4880-b68f-e9915e962802",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "a1213575-e9f4-40ba-b76d-f84f4d7e08f1",
                            DateOfBirth = new DateTime(1990, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cem.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cem",
                            Gender = "Erkek",
                            ImageId = 2,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEM.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "CEMYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEEOYnSqpHa1XXQ2yDIlL4n/RlbJEPQElJIyoWhr+q5SGJEBY2jSxD8PDSGZFXP2Taw==",
                            Phone = "5323456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c19a8bb-3441-4dbc-aaf1-ccf77f1caa41",
                            TwoFactorEnabled = false,
                            UserName = "cemyilmaz"
                        },
                        new
                        {
                            Id = "736b4336-3fbd-4b46-a3a5-8968798e94d1",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "d783354c-60b8-43cb-aec3-146b00c1e952",
                            DateOfBirth = new DateTime(1992, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şevval",
                            Gender = "Kadın",
                            ImageId = 3,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "sevval.demir@hotmail.com",
                            NormalizedUserName = "SEVVALDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOmMQhVo3sKvnPKhxburl63/Ie/BCz6KIVV9hzv6hbZAOJoBp3X9FPEJEX0Z0nmWLQ==",
                            Phone = "5387891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f481b933-eabe-47ae-862d-8348ff7d5661",
                            TwoFactorEnabled = false,
                            UserName = "sevvaldemir"
                        },
                        new
                        {
                            Id = "57aa0d8b-c87f-48ef-8dda-b95db2b49c54",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "551e8542-6f2b-46bb-9a1b-82ac835d3ea5",
                            DateOfBirth = new DateTime(1994, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 4,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEOL8YX48TQ8nakWFS158vtZ55ZHy2VZnNC6S/Tawon0fHWLDZXgHp8Xyo00nFD9VVg==",
                            Phone = "5336549876",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44ae7429-a46b-4925-8e8c-6d8d5df291ed",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildiz"
                        },
                        new
                        {
                            Id = "e68702cf-3d87-482d-a4a4-3822e6ab278d",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "40a94a8b-0e32-44e3-8842-30840543bbd1",
                            DateOfBirth = new DateTime(1980, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gul.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gül",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUL.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "GULSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDcGowqjzOj+FUjQRouu6ifCjxu4dN6B3R/wBRLVSM7SA3OudvuhIpbSjlCDHLSDVg==",
                            Phone = "5361234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "accf23dd-8ff5-4c40-a27d-54712c043eb5",
                            TwoFactorEnabled = false,
                            UserName = "gulsahin"
                        },
                        new
                        {
                            Id = "d210a19c-9c77-47b8-9b1a-0a63f951c465",
                            AccessFailedCount = 0,
                            City = "Kayseri",
                            ConcurrencyStamp = "a022a457-0645-45d0-9972-d0ff526950b3",
                            DateOfBirth = new DateTime(1987, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemal.kaya@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMAL.KAYA@GMAIL.COM",
                            NormalizedUserName = "KEMALKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEGaZh41YrQxhh5b4QsjbsO8o5j6fKYxxEIkF/0guACm06SlhL6VPC5l65ctwSsaG/A==",
                            Phone = "5359876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83eb2fb7-cb5c-4aa5-a526-f9e5849d5126",
                            TwoFactorEnabled = false,
                            UserName = "kemalkaya"
                        },
                        new
                        {
                            Id = "1481f491-b373-4b15-a730-9e67eb37249e",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "89375d40-9dbf-4739-abe1-8837069da5f3",
                            DateOfBirth = new DateTime(1990, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gokhan.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gökhan",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GOKHANAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECBixth8gHmjuDEp/YeZRmA6RXma0rNjRzPEyS7BuAnf34IjFdluy0eyi2J4gQlDMw==",
                            Phone = "5321234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6725579-462f-481e-9d35-dbb5ff022148",
                            TwoFactorEnabled = false,
                            UserName = "gokhanaydin"
                        },
                        new
                        {
                            Id = "eff716f0-d4a5-4fe0-819f-08e33ae5388a",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "f5605d3a-b1a5-44f4-98a8-d4ef926e001f",
                            DateOfBirth = new DateTime(1992, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seyma.yilmaz@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şeyma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEYMA.YILMAZ@HOTMAIL.COM",
                            NormalizedUserName = "SEYMAYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEF3Y8QBCaOMj74P+u4xeMPZnzoWSzLclowzu6QpFjgYo2QTU9pXWMlX/7eU/zPl9nA==",
                            Phone = "5399876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4cf4418f-b901-49e2-b858-5c5f3cc0b9e6",
                            TwoFactorEnabled = false,
                            UserName = "seymayilmaz"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(5709),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(5711),
                            Url = "teacher-1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(5713),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(5713),
                            Url = "teacher-2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(5715),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(5715),
                            Url = "teacher-3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(5717),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(5717),
                            Url = "teacher-4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(5719),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 57, 0, 390, DateTimeKind.Local).AddTicks(5719),
                            Url = "resimyok.jpg"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9272),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9288),
                            UserId = "a5c98e9f-44b0-4c81-818e-e91bc42c953e"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9301),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9302),
                            UserId = "ec0d588f-cb8a-4c7e-ae02-72074845f3b8"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9304),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9305),
                            UserId = "65bb8122-a0ac-4371-b0c1-80235e213edb"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9306),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9307),
                            UserId = "1e7ed4af-97e2-406a-9def-16ab848314c7"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9309),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9309),
                            UserId = "db79a216-2700-4d09-ae2f-f09d30ed356f"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9312),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9312),
                            UserId = "b9e5e681-4104-41e8-86b0-0258ff198b27"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9314),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9315),
                            UserId = "c3dd3f7c-ba43-4963-b434-d50b737c1743"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9317),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9317),
                            UserId = "cb9fe7b2-b43b-43e4-b629-1999e60cd98f"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9319),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9320),
                            UserId = "9bbc795a-c3f9-4a64-a3d6-dafe8f65b160"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9322),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9323),
                            UserId = "1a177ce2-5931-406d-9119-3347ec472ba9"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9386),
                            Graduation = "Çanakkale Onsekiz Mart Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9387),
                            UserId = "c8f66982-61c8-401f-9c09-493ab9872362"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9399),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9400),
                            UserId = "7fd92995-4546-4880-b68f-e9915e962802"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9402),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9403),
                            UserId = "736b4336-3fbd-4b46-a3a5-8968798e94d1"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9405),
                            Graduation = "Ege Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9405),
                            UserId = "57aa0d8b-c87f-48ef-8dda-b95db2b49c54"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9407),
                            Graduation = "Akdeniz Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9408),
                            UserId = "e68702cf-3d87-482d-a4a4-3822e6ab278d"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9411),
                            Graduation = "Erciyes Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9411),
                            UserId = "d210a19c-9c77-47b8-9b1a-0a63f951c465"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9413),
                            Graduation = "Çukurova Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9414),
                            UserId = "1481f491-b373-4b15-a730-9e67eb37249e"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9416),
                            Graduation = "Uludağ Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 12, 13, 56, 58, 593, DateTimeKind.Local).AddTicks(9416),
                            UserId = "eff716f0-d4a5-4fe0-819f-08e33ae5388a"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 5,
                            BranchId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            BranchId = 6
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 9
                        },
                        new
                        {
                            TeacherId = 8,
                            BranchId = 10
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Advert", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("Adverts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Adverts")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
